Last modified 2021-06-07 14:47:34

================================================================================
This file describes how to install scipyen and its dependencies in a virtual
environment (python3), independent of the system or local (i.e. "user") python
site packages.

Applies to: GNU/Linux platforms

The advantage of a virtual environment include the possibility of installing and
building software directly in this environment, without the need for administrator
(superuser) privileges, and without interfering with system-wide or account-wide 
software.

The only exception is building Python diretly from sources which may require
admin privileges.

This means the software can be uninstalled re-built, etc, without worrying about
the local account or system-wide interference.

Steps:
================================================================================
0. Clone the Scipyen git repo somewhere convenient (e.g. in $HOME)
================================================================================

    REQUIRES:
        git software (system-wide installation) including gitk and git-gui
        github cli (for Linux, also for Windows; other platforms may use github 
                    desktop app, you mileage mau vary)
    (for various distributions see https://github.com/cli/cli/blob/trunk/docs/install_linux.md)
    
        openSUSE/SUSE Linux (zypper)
            Install:

            sudo zypper addrepo https://cli.github.com/packages/rpm/gh-cli.repo
            sudo zypper ref
            sudo zypper install gh
            
        To use gh you need to authenticate with github (if not already done)
        gh auth login ==> select GitHub.com, then when prompted enter username
            and password (you will have to create a free github account )
            
Clone scipyen
        gh repo clone ctigaret/scipyen
        
        Then cd into scipyen and verify local repo is uptodate with the relevant
        branches:
            git checkout master
            git pull
            git checkout work
            git pull
            git checkout dev
            git pull
================================================================================

From now on, ALWAYS make sure you are on the dev branch (this also contains the 
doc/installation directory with pip requirements, etc). You may wish to run at
regular intervals:
    
    git checkout dev
    git pull

In the following we assume that scipyen has been cloned in $HOME/scipyen

================================================================================
1. INSTALL THE FOLLOWING PACKAGES AS PER YOUR DISTRIBUTION:
================================================================================
(* indicates you need to also install their corresponding devel packages; where
 appriopriate, a minimal version is specified):
    
Qt5 (*)
cmake3,     # NOTE this and the one blow are required ot configure vigra & neuron
cmake3-full, (includes cmake-gui) 
zlib (*)
hdf5 (*)
openexr (*)
openssl >= 1.11 (*)
fftw3 (*) (optionally with MPI bindings)
mpich (*)
tiff (*)
jpeg (*)
png (*)
sqlite3 (*)
libXcomposite (*) (for NEURON)
valgrind (optional)

================================================================================
2. BUILD PYTHON (if unhappy with what the distribution offers)

NOTE: This is RECOMMENDED if the distribution is behind the latest Python by 
(quite) a few minor versions.

For example, OpenSuSE Leap 15.3 installs Python-3.6.12; here, we use Python 
3.9.7 where there have been some significant changes, and because the latest neo 
package don't support python < 3.7
================================================================================

To build on a Python build from sources (e.g. 3.9.7) see the file:

    Build Python and virtual environmentUnix/README

From here on we assume it will be installed in /usr/local.


================================================================================
3. CREATE A PYTHON VIRTUAL ENVIRONMENT
================================================================================

see Building python and virtual environments/Unix/README for details


================================================================================
4. ACTIVATE THE PYTHON VIRTUAL ENVIRONMENT AND BUILD DEPENDENCIES
================================================================================

NOTE: for convenience, the source trees can be located inside the virtual 
environment's directory, e.g. ~/scipyenv/src (assuming the virtual environment is
in ~/scipyenv).

NOTE: From here on we assume all source trees are in $VIRTUAL_ENV/src  and
we operate inside the activated virtual environment in the $VIRTUAL_ENV/src directory

--------------------------------------------------------------------------------
4.1 BUILD AND INSTALL BOOST LIBRARIES boost_1_77_0.tar.b2
--------------------------------------------------------------------------------
On Linux :
    ./booststrap.sh --prefix=$VIRTUAL_ENV --with-python=/usr/local/bin/python3.9 --with-python-root=/usr/local
    ./b2 --prefix=$VIRTUAL_ENV

--------------------------------------------------------------------------------
4.2 INSTALL PIP REQUIREMENTS STAGE 0
--------------------------------------------------------------------------------
call pip install -r doc/installation/pip_requirements_0.txt

NOTE: this prepares for bulding the other C++ libs

--------------------------------------------------------------------------------
4.3 BUILD AND INSTALL NODEJS node-v15.6.0.tar.gz
--------------------------------------------------------------------------------
  (required to use bokeh with NEURON and jupyterlab)
  
  cd into the extracted source tree then run:
      
      ./configure --prefix=$VIRTUAL_ENV
      make -j4
      make doc
      make install

--------------------------------------------------------------------------------
4.4 BUILD AND INSTALL sip-5.51, PyQt5-5.15.3, PyQt5_sip-12.8.1 IN THIS ORDER
--------------------------------------------------------------------------------
For each of these, cd into their source tree and run:

..............
4.4.1 sip:
..............
    python setup.py build
    python setup.py install
    
..............
4.4.2 PyQt5:
..............
    python configure.py --confirm-license --qmake=`which qmake-qt5` --designer-plugindir=$VIRTUAL_ENV/lib/qt5/plugins/designer --qml-plugindir=$VIRTUAL_ENV/lib/qt5/plugins/PyQt5 --qsci-api-destdir=$VIRTUAL_ENV/share/qt5 --no-python-dbus
    make 
    make install

    pip list (should indicate PyQt5, sip)
................................
4.4.3 PyQt5.sip extension module:
................................
    python setup.py build
    python setup.py install

    pip show PyQt5-sip <-- verifies that PyQt5 sip module is installed
    
--------------------------------------------------------------------------------
4.5 BUILD AND INSTALL VIGRA
--------------------------------------------------------------------------------
git clone https://github.com/ukoethe/vigra.git

....................................
4.5.1 create out-of-source build tree
....................................

mkdir vigra-build && cd vigra-build

....................................
4.5.2 configure the build
....................................

cmake-gui ../vigra

        At first run click "configure" then as cmake variables are set or edited
        as below, press "configure" again
        
        In cmake-gui:
            * search for configuration variables containing the string 'INSTALL'
            (without quotes) and adjust them to point to the real path of your
            $VIRTUAL_ENV e.g., set the following variables as follows:
            CMAKE_INSTALL_PREFIX (-DCMAKE_INSTALL_PREFIX=) /home/user/scipyenv
            
            * set LIB_SUFFIX (-DLIB_SUFFIX=) 64 (optional; both lib and lib64 are added to LD_LIBRARY_PATH by the pyenv script)
                    
            * in the "WITH" group, make sure the following ar echecked (i.e. True): 
            boost-thread, boost-graph, openexr, vigranumpy, valgrind
    
            * press configure until all options are satisfied (i.e. nothing is
            highlighted in red anymore) - NOTE: this is a recursive process
            
            * finally, press "Generate" and quit cmake-gui
                
....................................
4.5.3 make & install
....................................
    make
    
    !!! NOTE !!!
    patch vigra-build/vigranumpy/docsrc/conf.py on line 25: 
        (or , better, vigra/vigranumpy/docsrc/conf.py.in on line 25)
        change from:
                except TypeError, e:
        to:
                except TypeError as e:
        (NOTE: this corrects deprecated syntax)
        
    make doc 
    make install (--> installs in $VIRTUAL_ENV/doc/vigra and $VIRTUAL_ENV/doc/vigranumpy)
    
-------------------------------------------------------------------------------
4.6. INSTALL pip requirements 1 & 2
-------------------------------------------------------------------------------
pip install -r ~/scipyen/doc/installation/pip_requirements_1.txt
pip install -r ~/scipyen/doc/installation/pip_requirements_2.txt

-------------------------------------------------------------------------------
4.7 BUILD AND INSTALL NEURON
-------------------------------------------------------------------------------
git clone https://github.com/neuronsimulator/nrn
mkdir nrn-build && cd nrn-build
cmake-gui ../nrn
"Configure" will also pull iv, coreneuron
        CMAKE_INSTALL_PREFIX (-DCMAKE_INSTALL_PREFIX=) $VIRTUAL_ENV
        NRN_ENABLE_CORENEURON=true
        NRN_ENABLE_INTERVIEWS=true
        NRN_ENABLE_MECH_DLL_STYLE=true
        NRN_ENABLE_MODULE_INSTALL=true
        NRN_ENABLE_INTERNAL_READLINE=false
        NRN_MODULE_INSTALL_OPTIONS --prefix= --home=$VIRTUAL_ENV
        NRN_ENABLE_MPI=true
        NRN_ENABLE_MPI_DYNAMIC=false
        NRN_ENABLE_PYTHON=true (default python3 fallback to python2)
        NRN_ENABLE_PYTHON_DYNAMIC=false
        NRN_ENABLE_RX3D=true
        NRN_ENABLE_SHARED=true
        NRN_ENABLE_TESTS=false
        NRN_ENABLE_THREADS=true
        LIB_INSTALL_DIR=$VIRTUAL_ENV/lib64
        IV_ENABLE_SHARED=true
make 
make install

    NOTE: Run the following in order to properly install neuron python modules 
    inside the site-packages corresponding  to the environment's python version
    
cd $VIRTUAL_ENV/src/nrn-build/src/nrnpython
    
python setup.py install 
    (to install nrnpython in site-packages)
    
    NOTE: Optional: Build neuron documentation locally and install locally 
        (see $VIRTUAL_ENV-src/nrn/docs/README.md)
    
pip3 install -r $VIRTUAL_ENV/src/nrn/docs/docs_requirements.txt
    
    (installs required python packages (e.g.commonmark, sphinx-rtd-theme, 
        recommonmark, plotly, etc) inside the virtual environment)
    
cd $VIRTUAL_ENV/src/nrn-build
make docs (NOTE this may fail --> no problems !)
    
    Optionally, copy/move (or, better make a symbolic link) 
    $VIRTUAL_ENV/src/nrn/docs/_build to $VIRTUAL_ENV/doc/neuron
    

-------------------------------------------------------------------------------
4.8 INSTALL LAST PIP REQUIREMENTS
-------------------------------------------------------------------------------
pip install -r ~/scipyen/doc/installation/pip_requirements_3.txt
================================================================================
5. Make final script links while still in the active python ivrtual environment
================================================================================

cd ~/scipyen
./make_script_links.sh

================================================================================
                                
                                !!! DONE !!!
                                
================================================================================


VVV Obsolete - TO MOVE TO stash files


b. The following software must be built inside the virtual environment (see
    NOTE 2021-01-12 10:13:03 Separate builds, below):
    1. sip
    2. Pyqt5 - built using the host system's Qt5, but without the designer and 
        qml plugins, and without the qscintila component.
    3. PyQt5.sip module
    4. vigra and python bindings for vigra (vigranumpy)
    5. NEURON modelling software with python bindings
    

NOTE 2021-01-12 10:13:03 Separate builds
------------------------------------------
The source directories DO NOT need to be located inside the directory of the
virtual python environment; they can be placed in a source repository separate
from the environment itself, e.g. $VIRTUAL_ENV/src or $VIRTUAL_ENV-src.

However, both the build and installation processes MUST be run from a shell
with the virtual python environment activated (see points 1.2 and 1.3, below).

By separating source and environment directories the source packages can be
re-built for specific environments. 

NOTE: 2021-01-14 09:02:07 Variations for individual software libraries:
------------------------------------------------------------------------

    *** Vigra and neuron software ***

        These can be built "outside" the source directories (i.e. in build 
        directories outside the source tree).

        Out-of-source builds are recommended for both vigra and neuron. The
        build processes are run from inside the build directories as detailed for 
        Vigra (section 4) and NEURON (section 5) below. 

        - The builds are configured using 'cmake' or 'cmake-gui'.

        - 'make' performs the building (compiling and linking) of the software;

        - 'make install' will install the software in the environment directory 
        tree as per configuration as explained in sections 4 and 5.

        Other optional commands are explained in sections 4 and 5.

        NOTE 2021-01-12 11:15:51: all git repositories cloned below can be
        refreshed (e.g. git checkout master then git pull) followed by 
        rebuilding & installing

    *** sip, PyQt5, PyQt5_sip module and node ***
        These do not seem to support out-of-source builds. They must be unpacked
        in the src directory and built INSIDE the resulting subdirectory.

  As per NOTE 2021-01-12 10:13:03 Separate builds and 
  NOTE: 2021-01-14 09:02:07 Variations for individual software libraries, the
  directory tree used in this README is as follows:
  
  $HOME
        |
        -- scipyenv
                    |
                    -- bin
                    |
                    -- include
                    |
                    -- lib
                    |
                    -- lib64 (symbolic link to $HOME/scipyenv/lib)
                    |
                    -- nrnipython
                    |
                    -- scipyen (the scipyen git repository)
                    |
                    -- scipyen_boilerplate
                    |
                    -- scipyen_not_staged
                    |
                    -- src
                        |
                        -- nrn (github clone, done by git )
                        |
                        -- nrn-build   
                        |
                        -- vigra (github clone, done by git)
                        |
                        -- vigra-build
                        |
                        -- sipxxx
                        |
                        -- PyQt5xxx
                        |
                        -- PyQt5_sipxxx
        
    * the src directory inside the environment tree contains cloned git repositories
    and directories for out-of-source build of 3rd party software, see the README
    file in there
    
  2. Install sip, PyQt5 and PyQt5.sip module
  ===============================================
  
  2.1 Download sources, build and install sip, PyQt5 and PyQt5.sip modules
  ------------------------------------------------------------------------
  NOTE: check on the Riverbank computing website:
  https://riverbankcomputing.com/software/sip/download
  and
  https://riverbankcomputing.com/software/pyqt/download
  
  before using wget - the versions available may not be the same as in the
  examples below
  
  Examples:
  sip v 5 (latest before PyQt6, which is in development for Qt6):
  wget 'https://www.riverbankcomputing.com/static/Downloads/sip/sip-5.5.1.dev2011271026.tar.gz'
  
  WARNING: 2021-01-11 16:43:23:
      sip5.5.1 has been removed form the Riverbank Computing SIP download page.
      The most recent version is sip6.0.1. However, the build of PyQt5 with sip6
      installed fails. Therefore, TO BUILD PYQT5 USE SIP5.X ARCHIVE ALREADY 
      DOWNLOADED HERE.
    
      TODO: build sip6 and PyQt6 and check Scipyen still works - expect disruption
      in 3rd party packages such as Jupyter qt console, etc. For the moment stick
      with PySt5/sip5.5.1
      
  PyQt5 but see WARNING: 2021-01-11 16:43:23:
  wget 'https://www.riverbankcomputing.com/static/Downloads/PyQt5/PyQt5-5.15.3.dev2012141313.tar.gz'
  
  Pyqt5 sip extension module: 
  download source tar.gz archive from PyPI web site https://pypi.org/project/PyQt5-sip/
  
  Example (NOTE: 2021-01-11 18:07:03: best downloded manually from the above site)
  wget 'https://files.pythonhosted.org/packages/73/8c/c662b7ebc4b2407d8679da68e11c2a2eb275f5f2242a92610f6e5024c1f2/PyQt5_sip-12.8.1.tar.gz'
  
  2.2.1 Build sip
  ...............
  tar xzvf sip-5.5.1.dev2011271026.tar.gz
  cd sip-5.5.1.dev2011271026/
  
  python setup.py build
  python setup.py install
  
  2.2.2 Build PyQt5
  ...................
  
  NOTE: This requires a systenm-wide installation of the Qt5 developer packages
  and their dependencies (qmake, build chain, etc)
  
  WARNING: 2021-01-11 17:50:54 see WARNING: 2021-01-11 16:43:23 :
    Requires sip5.5.1; fails to build if sip6.0.1 is installed.

  cd ..
  tar xzvf PyQt5-5.15.3.dev2012141313.tar.gz
  cd PyQt5-5.15.3.dev2012141313
  
  # python configure.py --qmake=`which qmake-qt5` --no-designer-plugin --no-qml-plugin --no-qsci-api --no-python-dbus
  
  # NOTE: 
  # QT_INSTALL_PLUGINS resolves to /usr/lib64/qt5/plugins
  # QT_INSTALL_DATA resolves to /usr/share/qt5
  # therefore the designer plugin dir, qml plugin dir and qsci api dir must be manually
  # mentioned
  # By default these are:
      --designer-plugindir=QT_INSTALL_PLUGINS/designer
      --qml-plugindir=QT_INSTALL_PLUGINS/PyQt5
      --qsci-api-destdir=QT_INSTALL_DATA/qsci
  #
  # Replace
  # QT_INSTALL_PLUGINS with $VIRTUAL_ENV/lib/qt5/plugins/
  # QT_INSTALL_DATA with $VIRTUAL_ENV/share/qt5
  
  #NOTE: 2021-09-20 11:08:31 the line below seems to be working at configuration stage
  python configure.py --confirm-license --qmake=`which qmake-qt5` --designer-plugindir=$VIRTUAL_ENV/lib/qt5/plugins/designer --qml-plugindir=$VIRTUAL_ENV/lib/qt5/plugins/PyQt5 --qsci-api-destdir=$VIRTUAL_ENV/share/qt5 --no-python-dbus
  
  python dbus bindings are skipped because they tend to be installed in a system directory
  
  # NOTE: installation fails when the installer script tries to install the 
   designer, qml plugins smd python dbus extension in the system-wide Qt5 
   installation (but without root privileges) -- hence these are all disabled
  
  (enter 'yes' to accept the license)
  
  make # (... be prepared to wait ...)
  make install
  
  2.2.3 Build Pyqt5.sip module
  .............................
  cd ..
  tar xzvf PyQt5_sip-12.8.1.tar.gz
  cd PyQt5_sip-12.8.1/
  
  python setup.py build
  python setup.py install
  
  pip show PyQt5-sip <-- veryfies that PyQt5 sip module is installed
  
  3. Build and install Node.js in the local virtual environment
  -----------------------------------------------------------------------
  (required to use bokeh with NEURON and jupyterlab)
  
  3.1 Download Node.js source code archive from https://nodejs.org/en/download/current/
  
  --> node-v15.6.0.tar.gz
  
  
  cd $VIRTUAL_ENV-src
  tar xzf node-v15.6.0.tar.gz
  cd node-v15.6.0
  
  (make sure scipyenv environment is activated)
  
  ./configure --prefix=$HOME/scipyenv
  make -j4
  make doc
  make install
  
  
  4. Install python packages inside the environment (via pip install ...)
  -----------------------------------------------------------------------
  NOTE: because the environment was created for a python3 environemnt, pip and 
  pip3 are the same
  
  NOTE: do not use --user option because it will install packages 
    in ~/.local/lib/python-x.y/site-packages and therefore bypass the environment
    
  NOTE: is the virtual environemnt has been created with the --system-site-packages
  option, then you may want to pass the '-I' options to pip install command for
  those packages that are already installed systemwide

e.g. pip install -I numpy NOTE: omit -I
    This may flag further needed dependencies, that will have to be installed
    in the environment.
    
    
  
    Package         Dependencies                
                    (installed alongside if not already present
                     NOTE: some dependencies are required
                     by multiple packages and, if installed, pip will verify 
                     their installed versions; therefore, these are listed below
                     only ONCE: the lists are not exhaustive representations of
                     these dependencies)
    ----------------------------------------------------------------------------
    xxhash (optional, not used currently)
    distributed
    blosc
    * numpy
    * matplotlib      (pyparsing, cycler, kiwisolver, Pillow, python_dateutil, six)
    * scipy
    * sympy           (mpmath)
    * cmocean         (for nice colormaps)
    * cmasher         (ditto; brings colorspacious, e13tools, )
    * viscm           matplotlib module to visualize colormaps (pip install viscm)
    * scikit-learn    (joblib, threadpoolctl)
    * scikit-image    (imageio, networkx, decorator, pywavelets, tifffile)
    * seaborn         (pandas, pillow, cycler, python-dateutil, pyparsing, six)
    * bohek           (for jupyterlab plotting from neuron; also install tornado, typing_extension)
    
    * pandas          (pytz)
    * nixio
    * neo             (quantities)
    * pyqtgraph
    * statsmodels     (patsy)
    * pingouin        (urllib3, idna, chardet, certifi, requests, littleutils, 
                     tabulate, pandas_flavor, outdated, xarray)
    * researchpy
    * h5py           
    * nose            required for vigra                            
    * sphinx          required for vigra    
                    also installs:
                    (sphinxcontrib-serializinghtml, sphinxcontrib-qthelp, 
                    sphinxcontrib-jsmath, sphinxcontrib-htmlhelp, sphinxcontrib-devhelp, 
                    sphinxcontrib-applehelp, snowballstemmer, imagesize, docutils, 
                    babel, alabaster)
    * qimage2ndarray
    * imreg_dft                               
    xarray      
    * pyxdg
    * python-magic    Python interface to the libmagic file type identification library
    nested_lookup
    dpath

    * jupyter         (zipp, typing-extensions, ipython-genutils, traitlets,
                    pyrsistent, importlib-metadata, attrs, wcwidth, tornado, pyzmq,
                    ptyprocess, parso, jupyter-core, jsonschema, webencodings, pygments,
                    pycparser, prompt-toolkit, pickleshare, pexpect, nest-asyncio, 
                    nbformat, MarkupSafe, jupyter-client, jedi, backcall, async-generator, 
                    testpath, pandocfilters, nbclient, mistune, jupyterlab-pygments, 
                    jinja2, ipython, entrypoints, defusedxml, cffi, bleach, terminado,
                    Send2Trash, prometheus-client, nbconvert, ipykernel, argon2-cffi, 
                    notebook, widgetsnbextension, qtpy, qtconsole, jupyter-console, 
                    ipywidgets)
    
    NOTE: 2021-06-12 15:46:34 
    jedi 0.18.0 is incompatible with IPython<=7.19; if you have IPython<=7.19 
    installed in scipyenv then force install an earlier jedi version:
        pip install jedi==0.17.2
        
        see also here: 
            https://github.com/davidhalter/jedi/issues/1714
            https://github.com/ipython/ipython/issues/12740
            https://github.com/ipython/ipython/issues/12821
                
    * jupyter_qtconsole_colorschemes
    
    NOTE: Scipyen does not aim to replicate the functionality in the jupyter 
        interfaces available - some people may find it easy(er) to work with 
        jupyter notebook and/or jupyterlab.
        
        jupyter notebook is already installed alongside jupyter; jupyterlab can 
        be installed separately.
        
        jupyter notebooks and/or jupyterlab are useful when trying out gui2 module
        in neuron package (for plotting outside of neuron's own gui)
        
    ipyparallel
    * jupyter_cms     (woosh)
    * jupyterlab      (immutables, contextvars, sniffio, dataclasses, anyio, jupyter-server,
                     json5, nbclassic, jupyterlab-server, )
    
    * jupyterlab_templates
    
    * jupyterthemes   for theming the jupyter notebook
    
    * nodejs - requires installation of a more recent Node.js version (>- 12.0.0)
        in the local environment
        
    
    *** Install Python libraries for storing configuration options unrelated to the GUI:
        NOTE: this is still experimental - testing various configuration libraries
    
    * confuse     (pyyaml)
        
        not used, not installed:
            config (pip install config) -- 
                recommended for use inside a virtual environment, which we use here
            
            dynaconf -- python library for software configuration framework, independent
                of the Qt5 framework
                * not very straightforward to use; 
                * not straightforward to permamently store changed configurations 
                    form inside the program
                    
            python-configuration -- alternative to config and dynaconf 
            python-configuration[toml,yaml] -- toml and yaml modules of the above
                * again, saving configuration to files from within the program not straightforward
                
    Optional jupyter kernels:
    * octave_kernel   (metakernal)
    * gnuplot_kernel
    * matlab_kernel   (wurlitzer)
    
    Other modules - functionality complementary to NEURON:
        pyneuroml reader
            (NOTE: pyneuroml may require installation of NeuroML inside scipyenv)
        neurom - SWC reader
        pylmeasure

    # install jupyterlab extensions for bokeh - note hey will fail as they require pyqtlite which
    # is notuet available for python3.9
    jupyter labextension install @jupyter-widgets/jupyterlab-manager
    jupyter labextension install @bokeh/jupyter_bokeh - error current version of jupyterlab not supported
    ValueError: The extension "@bokeh/jupyter_bokeh" does not yet support the current version of JupyterLab.
    NOTE: Kepler 2021-09-20 17:39:04 still -- fails tp build
    
    Building jupyterlab assets (production, minimized)
    An error occurred.
    RuntimeError: JupyterLab failed to build
    See the log file for details:  /tmp/jupyterlab-debug-f7hokh0b.log


    Conflicting Dependencies:
    JupyterLab                        Extension      Package
    >=3.0.3 <3.1.0                    >=2.0.2 <3.0.0 @jupyterlab/application
    >=3.0.2 <3.1.0                    >=2.0.2 <3.0.0 @jupyterlab/apputils
    >=3.0.3 <3.1.0                    >=2.0.2 <3.0.0 @jupyterlab/notebook
    >=3.0.2 <3.1.0                    >=2.0.1 <3.0.0 @jupyterlab/rendermime-interfaces
    >=6.0.2 <6.1.0                    >=5.0.2 <6.0.0 @jupyterlab/services
    See the log file for details:  /tmp/jupyterlab-debug-vqsmr_8t.log
    
  5. Install (download/clone, build/make & install) vigra
  ----------------------------------------------------------------
  5.1 Required depedencies (indluding their development packages)
    NOTE: These are installed system-wide, (i.e. not just in scipyen virtual environment)
    typically via the distribution's software management tools 
    
    TODO: Contemplate installing these inside the virtual environment - especially
        when the environment also has its own (stand-alone) Qt5 build.
  ............................................................................
  NOTE 2021-01-11 18:44:43: some of these may have already been installed with
  their development packaged system-wide - use your distribution software manager
  to verify.
  ............................................................................
  
    cmake, cmake-gui NOTE: needs cmake3 which on opensuse15.2 comes as cmake3 but as cmake on leap15.3
    zlib
    tiff
    jpeg
    png
    fftw3
        and mpich bindings (for neuron)
    hdf5
    openexr
    valgrind
    python3 - effected in the virtual environment!
        numpy, 
        nose, 
        sphinx
    boost-python3 - system-wide
    boost-graph
    boost-threads
    boost-timer
    doxygen
    
  5.2 Clone vigra repo (while in src, with the virtual environment activated):
  ...........................................................................
    cd $VIRTUAL_ENV-src
    
    git clone https://github.com/ukoethe/vigra.git
    
    (--> creates $VIRTUAL_ENV-src/vigra)
    
  5.3 Create out-of-source build for vigra
  ........................................
  NOTE if inside virtual environment - get out of it!
    5.3.1
    cd ..
    mkdir $VIRTUAL_ENV/src/vigra-build (if not already there, see NOTE: 2021-01-14 09:02:07)
    cd $VIRTUAL_ENV/src/vigra-build
    
    5.3.2 generate Makefile
    cmake-gui ~/scypienv-src/vigra (run cmake-gui --help for options)
        At first run click "configure" then as cmake variables are set or edited
        as below, press "configure" again
        
        In cmake-gui:
            * search for configuration variables containing the string 'INSTALL'
            (without quotes) and adjust them to point to the real path of your
            $VIRTUAL_ENV e.g., set the following variables as follows:
            CMAKE_INSTALL_PREFIX (-DCMAKE_INSTALL_PREFIX=) /home/user/scipyenv
            
            * set LIB_SUFFIX (-DLIB_SUFFIX=) 64
                    
            * in the "WITH" group, make sure the following ar echecked (i.e. True): 
            boost-thread, boost-graph, openexr, vigranumpy, valgrind
    
            * press configure until all options are satisfied (i.e. nothing is
            highlighted in red anymore) - NOTE: this is a recursive process
            
            * finally, press "Generate" and quit cmake-gui
                
    5.3.3. Build vigra and install
    make
    patch vigra-build/vigranumpy/docsrc/conf.py on line 25: 
        (or , better, vigra/vigranumpy/docsrc/conf.py.in on line 25)
        change from:
                except TypeError, e:
        to:
                except TypeError as e:
        (NOTE: this corrects deprecated syntax)
        
    make doc 
    make install (--> installs in $VIRTUAL_ENV/doc/vigra and $VIRTUAL_ENV/doc/vigranumpy)
    
    cd ..
    
    6. Install (download/clone, make and install) NEURON
    ---------------------------------------------------------------
    6.1 prerequisites: 
        * python3-cython (installed system-wide; e.g. 'python3-Cython' on OpenSuSE)
        NOTE: if you are using a Python version built from sources then you MUST
        use a virtual environment with THAT SPECIFIC python version, AND install
        cython package INSIDE IT.
        
        mpich
        
    6.2 clone git repository (in src): gh repo clone neuronsimulator/nrn
    
    cd $VIRTUAL_ENV-src
    mkdir $VIRTUAL_ENV/src/nrn-build (if not present, see NOTE: 2021-01-14 09:02:07)
    
    git clone https://github.com/neuronsimulator/nrn 
    (=> creates ~/scipeynv-src/nrn)
    
    6.3 Configure the neuron build
    
    cd ~/scipyen/src/nrn-build
     NOTE: requires libXcomposite development packages
    cmake-gui ..$VIRTUAL_ENV-src/nrn
        "Configure" will also pull iv, coreneuron
        CMAKE_INSTALL_PREFIX (-DCMAKE_INSTALL_PREFIX=) $VIRTUAL_ENV
        NRN_ENABLE_CORENEURON=true
        NRN_ENABLE_INTERVIEWS=true
        NRN_ENABLE_MECH_DLL_STYLE=true
        NRN_ENABLE_MODULE_INSTALL=true
        NRN_ENABLE_INTERNAL_READLINE=false
        NRN_MODULE_INSTALL_OPTIONS --prefix= --home=$VIRTUAL_ENV
        NRN_ENABLE_MPI=true
        NRN_ENABLE_MPI_DYNAMIC=false
        NRN_ENABLE_PYTHON=true (default python3 fallback to python2)
        NRN_ENABLE_PYTHON_DYNAMIC=true
        NRN_ENABLE_RX3D=true
        NRN_ENABLE_SHARED=true
        NRN_ENABLE_TESTS=false
        NRN_ENABLE_THREADS=true
        LIB_INSTALL_DIR=$VIRTUAL_ENV/lib64
        IV_ENABLE_SHARED=true
        
        In cmake-gui, search for configuration variables containing the string
        'INSTALL' (without quotes) and adjust them to point to the real path of
        $VIRTUAL_ENV
        
    6.4 Build neuron, then install
    make
    make install
    
    properly install neuron python modules inside the site-packages corresponding
    to the environment's python version
    
    cd $VIRTUAL_ENV/src/nrn-build/src/nrnpython
    
    python setup.py install 
    (to install nrnpython in site-packages)
    
    Optional:
    Build neuron documentation locally and install locally (see $VIRTUAL_ENV-src/nrn/docs/README.md)
    
    pip3 install -r $VIRTUAL_ENV/src/nrn/docs/docs_requirements.txt
        --> installs required python packages (e.g.commonmark, sphinx-rtd-theme, 
        recommonmark, plotly, etc) inside the virtual environment
    
    cd $VIRTUAL_ENV/src/nrn-build
    make docs
    
    Optionally, copy/move (or, better make a symbolic link) 
    $VIRTUAL_ENV/src/nrn/docs/_build to $VIRTUAL_ENV/doc/neuron
    
    
    7. Clone scipyenv (for now use the dev branch)
    ----------------------------------------------
    REQUIRES git software (system-wide installation) including gitk and git-gui
    
    7.1 install github cli (for Linux; other platforms may use github desktop app)
    (for various distributions see 
     https://github.com/cli/cli/blob/trunk/docs/install_linux.md)
    
        openSUSE/SUSE Linux (zypper)
            Install:

            sudo zypper addrepo https://cli.github.com/packages/rpm/gh-cli.repo
            sudo zypper ref
            sudo zypper install gh
            
    7.2 (in ~scipyenv, with environment activated)
    
    7.2.1 authenticate with github (if not already done)
        gh auth login ==> select GitHub.com, then when prompted enter username
            and password
            
    7.2.2 Clone scipyen
        gh repo clone ctigaret/scipyen
        
        Then cd into scipyen and verify local repo is uptodate with the relevant
        branches:
            git checkout master
            git pull
            git checkout dev
            git pull
            git checkout work
            git pull
            
        Finally, for development work, switch to the dev branch:
            git checkout dev; make sure to git pull every time
            
    8. link the scypien bash script (executable)
        cd $VIRTUAL_ENV/bin
        ln -s ../scipyen/scipyen scipyen
        ln -s ../scipyen/noteboook.sh notebook
        ln -s ../scipyen/jupyterlab.sh jupyterlab
        ln -s ../scipyen/set_browser.sh set_browser
        
    9. ONLY IF USING NEURON:
        ln -s ../scipyen/nrnipython/nrnipython nrnipython
        ln -s ../scipyen/nrnipython/nrnipython nrnpython
        ln -s ../scipyen/nrnipython/nrnipython nrnpy
    
    10. Other software (optional)
    ----------------------------
    10.1 pygrace -  not installed
    
    10.2 pykde5 - not built, not installed 
        requires sipconfig module which doesn't exist anymore
    
    10.3 cvapp -- not installed, not used - import 3D data from NEURON directly
    
    
    =======================================
    NOTE: 2021-09-15 09:02:26 On Windows 10
    =======================================
    
    python 3.9 (windows installer): choose to place executable on PATH
    virtualenv:
        C:\Users\xxx>pip install virtualenv
        C:\Users\xxx>virtualenv scipyenv
        C:\Users\xxx>cd scipyenv
        C:\Users\xxx>scipyenv\Scripts\activate -->
        (scipyenv) C:\Users\xxx\scipyenv>
        (scipyenv) C:\Users\xxx\scipyenv>pip install PyQt5 --> installs PyQt5-5.5.4, PyQt5-Qt5-5.15.2,PyQt5-sip-12.9.0
        
    
    create C:\Users\xxx\Scripts directory, add it to the registered %PATH%
    environment variable
    
    setx path "%path%;%userprofile%\Scripts;"
    
    then restart the command prompt
    
    Inside the Scripts directory place the following as scipyact.bat
    @echo off
    %userprofile%\scipyenv\Scripts\activate
    echo on
    
    to activate scipyenv inside the command prompt just type 'scipyact'

    
    
    ... proceed with python modules installation as above WHILE in: 
    (scipyenv) C:\Users\xxx\scipyenv (i.e. with environment activated)
        
    Qt (Open source edition) - 
    visual studio community 2019 -  C++ environment only (use python from above, 
                                don't use visual studio's own python)
    
    
    Download vigra binary with sources and documentation for Visual Studio including dependencies
    https://github.com/ukoethe/vigra/releases/download/Version-1-11-1/vigra-1.11.1-win64-vc14.zip
    Extract in C:\Users\xxx\vigra-1.11.1-win64-vc14 => will create vigra-1.11.1 directory in there
