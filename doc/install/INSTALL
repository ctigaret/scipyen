Last modified / change log:

2021-10-09 18:15:17

    
2021-06-07 14:47:34

================================================================================
This file describes how to install scipyen and its dependencies in a virtual
environment (python3), independent of the system or local (i.e. "user") python
site packages.

Applies to: GNU/Linux platforms

The advantage of a virtual environment include the possibility of installing and
building software directly in this environment, without the need for administrator
(superuser) privileges, and without interfering with system-wide or account-wide 
software.

The only exception is building Python directly from sources which may require
admin privileges.

This means the software can be uninstalled re-built, etc, without worrying about
the local account or system-wide interference.

Steps:
================================================================================
0. Clone the Scipyen git repo somewhere convenient (e.g. in $HOME)
================================================================================

    REQUIRES:
        git software (system-wide installation) including gitk and git-gui
            NOTE: get this using your OS distribution's software management - it
            is basic enough to be able to install it in this way; otherwise you
            may have to build & install it from sources
            
        Optional:    
        github cli (for Linux, also for Windows; other platforms may use github 
                    desktop app, you mileage mau vary)
(for various distributions see https://github.com/cli/cli/blob/trunk/docs/install_linux.md)
    
        openSUSE/SUSE Linux (zypper)
            Install:

            sudo zypper addrepo https://cli.github.com/packages/rpm/gh-cli.repo
            sudo zypper ref
            sudo zypper install gh
            
        To use gh you need to authenticate with github (if not already done)
        gh auth login ==> select GitHub.com, then when prompted enter username
            and password (you will have to create a free github account )
            
    Clone scipyen
            gh repo clone ctigaret/scipyen
        
        OR:
        
            git clone https://github.com/ctigaret/scipyen.git
        
        Then cd into scipyen and verify local repo is uptodate with the relevant
        branches:
            
            git checkout master
            git pull
            git checkout work
            git pull
            git checkout dev
            git pull

From now on, ALWAYS make sure you are on the dev branch (this also contains the 
doc/installation directory with pip requirements, etc). You may wish to run at
regular intervals:
    
            git checkout dev
            git pull
            
In the following we assume that scipyen has been cloned in $HOME/scipyen and all
relative paths in this document are RELATIVE to $HOME/scipyen/

================================================================================
1. INSTALL THE FOLLOWING PACKAGES AS PER YOUR OS DISTRIBUTION:
================================================================================
(* indicates you also need to install their corresponding devel packages; where
 appropriate, a minimal version is specified):
These will be installed system-wide hence will be available regardless of 
whether you are in an activate python virtual environment or not.
    
Qt5 (*)
cmake3,     # NOTE this and the one below are required to configure vigra & neuron
cmake3-full # (includes cmake-gui) 
zlib (*)
hdf5 (*)
openexr (*)
openssl >= 1.11 (*)
fftw3 (*) (optionally and recomended with MPI bindings)
mpich (*)
tiff (*)
jpeg (*)
png (*)
sqlite3 (*)
libXcomposite (*) (for NEURON)
valgrind (optional)

================================================================================
2. BUILD PYTHON (if unhappy with what the distribution offers)
================================================================================

NOTE: This is RECOMMENDED if the distribution is behind the latest Python by 
(quite) a few minor versions.

NOTE: If you choose to build python then the folloing python packages must also
be built locally (from inside the activated virtual python environment, see below):
    sip
    PyQt5
    PyQt5_sip
    tables
    

For example, OpenSuSE Leap 15.3 installs Python-3.6.12; here, we use Python 
3.9.7 where there have been some significant changes, and because the latest neo 
package doesn't support python < 3.7


To build Python from sources (e.g. 3.9.7) see the file:

    $HOME/scipyen/doc/install/Python/Unix/README
    
NOTE: To avoid overshadowing/overwriting your system's python3 executable, 
ALWAYS execute 'make altinstall' AND NOT 'make install' after building.

'make altinstall' needs to be called as superuser (su then password, or sudo)

Also you MUST call ldconfig (again, as superuser).

From here on we assume Python-3.9.7 was built then installed in /usr/local.

Run the $HOME/scipyen/make_script_links.sh once - this will create a symbolic 
link from $HOME/scipyen/doc/install/Python/Unix/pyenv to $HOME/pyenv
(see $HOME/scipyen/doc/install/Python/Unix/README for details)

NOTE: If you relocate the 'scipyen' directory you have to recreate these links.
Have a look inside make_script_links.sh shell script to see what it does.

================================================================================
2.a IF YOU HAVE BUILT YOUR OWN PYTHON STACK
================================================================================

If you plan to use pytables AND you are using your own built Pyton stack, then
you MUST build pytables yourself - see 4.6b, below.

================================================================================
3. CREATE A PYTHON VIRTUAL ENVIRONMENT
================================================================================

(see $HOME/scipyen/doc/install/Python/Unix/README for details about creating it
 and then activating it)

From here on we assume the environment directory is $HOME/scipyenv39 (the name
reflects the use of Python-3.9)


================================================================================
4. ACTIVATE THE PYTHON VIRTUAL ENVIRONMENT AND BUILD DEPENDENCIES
================================================================================

Once the virtual environment has been activated, a new environment variable 
VIRTUAL_ENV becomes available, pointing to the location of the environment's
directory (e.g., $HOME/scipyenv39) so we will use VIRTUAL_ENV through to the
end of this document, when referring to the environment's directory.

NOTE: For convenience, the source trees will be placed in a directory 'src'
inside the virtual environment's directory, i.e., $HOME/scipyenv39/src 
(assuming the virtual environment is in $HOME/scipyenv39, see above).

NOTE that this is NOT necessary - you can have the src located somewhere else, 
e.g. on a larger 'data' partition, but AVOID networked partitions.

NOTE: From here on we assume all source trees are in $VIRTUAL_ENV/src  and
we operate from an activated virtual environment, in the $VIRTUAL_ENV/src directory

--------------------------------------------------------------------------------
4.1 BUILD AND INSTALL BOOST LIBRARIES boost_1_77_0.tar.b2
--------------------------------------------------------------------------------
On Linux :
    ./booststrap.sh --prefix=$VIRTUAL_ENV --with-python=/usr/local/bin/python3.9 --with-python-root=/usr/local
    ./b2 --prefix=$VIRTUAL_ENV

--------------------------------------------------------------------------------
4.2 INSTALL PIP REQUIREMENTS STAGE 0
--------------------------------------------------------------------------------
call pip install -r $HOME/scipyen/doc/installation/pip_requirements_0.txt

NOTE: this prepares for bulding the other C++ libs

--------------------------------------------------------------------------------
4.3 BUILD AND INSTALL NODEJS node-v15.6.0.tar.gz
--------------------------------------------------------------------------------
  (required to use bokeh with NEURON and jupyterlab)
  
  cd into the extracted source tree then run:
      
      ./configure --prefix=$VIRTUAL_ENV
      make -j4
      make doc
      make install

--------------------------------------------------------------------------------
4.4 BUILD AND INSTALL sip-5.51, PyQt5-5.15.3, PyQt5_sip-12.8.1 IN THIS ORDER
--------------------------------------------------------------------------------
For each of these, cd into their source tree and run:

..............
4.4.1 sip:
..............
    python setup.py build
    python setup.py install
    
..............
4.4.2 PyQt5:
..............
    python configure.py --confirm-license --qmake=`which qmake-qt5` --designer-plugindir=$VIRTUAL_ENV/lib/qt5/plugins/designer --qml-plugindir=$VIRTUAL_ENV/lib/qt5/plugins/PyQt5 --qsci-api-destdir=$VIRTUAL_ENV/share/qt5 --no-python-dbus
    make 
    make install

    pip list (should indicate PyQt5, sip)
................................
4.4.3 PyQt5.sip extension module:
................................
    python setup.py build
    python setup.py install

    pip show PyQt5-sip <-- verifies that PyQt5 sip module is installed
    
--------------------------------------------------------------------------------
4.5 BUILD AND INSTALL VIGRA
--------------------------------------------------------------------------------
git clone https://github.com/ukoethe/vigra.git

....................................
4.5.1 create out-of-source build tree
....................................

mkdir vigra-build && cd vigra-build

....................................
4.5.2 configure the build
....................................

cmake-gui ../vigra

        At first run click "configure" then as cmake variables are set or edited
        as below, press "configure" again
        
        In cmake-gui:
            * search for configuration variables containing the string 'INSTALL'
            (without quotes) and adjust them to point to the real path of your
            $VIRTUAL_ENV e.g., set the following variables as follows:
            CMAKE_INSTALL_PREFIX (-DCMAKE_INSTALL_PREFIX=) /home/user/scipyenv
            
            * set LIB_SUFFIX (-DLIB_SUFFIX=) 64 (optional; both lib and lib64 are added to LD_LIBRARY_PATH by the pyenv script)
                    
            * in the "WITH" group, make sure the following are checked (i.e. True): 
            boost-thread, boost-graph, openexr, vigranumpy, valgrind
    
            * press configure until all options are satisfied (i.e. nothing is
            highlighted in red anymore) - NOTE: this is a recursive process
            
            * finally, press "Generate" and quit cmake-gui
                
....................................
4.5.3 make & install
....................................
    make
    
    !!! NOTE !!!
    patch vigra-build/vigranumpy/docsrc/conf.py on line 25: 
        (or , better, vigra/vigranumpy/docsrc/conf.py.in on line 25)
        change from:
                except TypeError, e:
        to:
                except TypeError as e:
        (NOTE: this corrects deprecated syntax)
        
    make doc 
    make install (--> installs in $VIRTUAL_ENV/doc/vigra and $VIRTUAL_ENV/doc/vigranumpy)
    
-------------------------------------------------------------------------------
4.6. INSTALL pip requirements 1 & 2
-------------------------------------------------------------------------------
pip install -r $HOME/scipyen/doc/installation/pip_requirements_1.txt
pip install -r $HOME/scipyen/doc/installation/pip_requirements_2.txt

-------------------------------------------------------------------------------
4.6b. BUILD AND INSTALL PyhTables (tables)
-------------------------------------------------------------------------------
This is REQUIRED if you are using a built Python stack (see above)

NOTE: PyTables are avaiulbale as 'tables'; to use you must 'import tables'
gh repo clone PyTables/PyTables
cd PyTables
python setup.py build
python setup.py install

Check that importing tables doesn't crash the interpreter:
    
    python
    
    >>> import tables
    >>>
    
-------------------------------------------------------------------------------
4.7 BUILD AND INSTALL NEURON
-------------------------------------------------------------------------------
git clone https://github.com/neuronsimulator/nrn
mkdir nrn-build && cd nrn-build
cmake-gui ../nrn
"Configure" will also pull iv, coreneuron
        CMAKE_INSTALL_PREFIX (-DCMAKE_INSTALL_PREFIX=) $VIRTUAL_ENV
        NRN_ENABLE_CORENEURON=true
        NRN_ENABLE_INTERVIEWS=true
        NRN_ENABLE_MECH_DLL_STYLE=true
        NRN_ENABLE_MODULE_INSTALL=true
        NRN_ENABLE_INTERNAL_READLINE=false
        NRN_MODULE_INSTALL_OPTIONS --prefix= --home=$VIRTUAL_ENV
        NRN_ENABLE_MPI=true
        NRN_ENABLE_MPI_DYNAMIC=false
        NRN_ENABLE_PYTHON=true (default python3 fallback to python2)
        NRN_ENABLE_PYTHON_DYNAMIC=false
        NRN_ENABLE_RX3D=true
        NRN_ENABLE_SHARED=true
        NRN_ENABLE_TESTS=false
        NRN_ENABLE_THREADS=true
        LIB_INSTALL_DIR=$VIRTUAL_ENV/lib64
        IV_ENABLE_SHARED=true
make 
make install

    NOTE: Run the following in order to properly install neuron python modules 
    inside the site-packages corresponding  to the environment's python version
    
cd $VIRTUAL_ENV/src/nrn-build/src/nrnpython
    
python setup.py install 
    (to install nrnpython in site-packages)
    
    NOTE: Optional: Build neuron documentation locally and install locally 
        (see $VIRTUAL_ENV/src/nrn/docs/README.md)
    
pip3 install -r $VIRTUAL_ENV/src/nrn/docs/docs_requirements.txt
    
    (installs required python packages (e.g.commonmark, sphinx-rtd-theme, 
        recommonmark, plotly, etc) inside the virtual environment)
    
cd $VIRTUAL_ENV/src/nrn-build
make docs (NOTE this may fail --> no problems !)
    
    Optionally, copy/move (or, better make a symbolic link) 
    $VIRTUAL_ENV/src/nrn/docs/_build to $VIRTUAL_ENV/doc/neuron
    

-------------------------------------------------------------------------------
4.8 INSTALL LAST PIP REQUIREMENTS
-------------------------------------------------------------------------------
pip install -r $HOME/scipyen/doc/installation/pip_requirements_3.txt


================================================================================
5. Make final script links while still in the active python virtual environment
================================================================================

cd $HOME/scipyen/
./make_script_links.sh

6. You may optionally create a symbolic link of $HOME/scipyen into $VIRTUAL_ENV.
ln -s $HOME/scipyenv $VIRTUAL_ENV/scipyen

With this final procedure, the $VIRTUAL_ENV directory tree should look like this:
    
  $HOME
        |
        -- scipyenv
                    |
                    -- bin
                    |
                    -- include
                    |
                    -- lib
                    |
                    -- lib64                            
                    |
                    -- nrnipython
                    |
                    -- scipyen
                    |
                    -- src
                        |
                        -- node-xxxx
                        |
                        -- nrn (github clone, done by git )
                        |
                        -- nrn-build   
                        |
                        -- vigra (github clone, done by git)
                        |
                        -- vigra-build
                        |
                        -- sip-xxx
                        |
                        -- PyQt5-xxx
                        |
                        -- PyQt5_sipxxx
        
NOTE: lib64 is typically a symbolic link to lib

================================================================================
7.Optional: Install h5pyViewer
NOTE: This does not seem to be maintained anymore: pip install h5pyViewer fails
================================================================================

Grab the git repo:
    git clone https://github.com/ganymede42/h5pyViewer.git
    
Get your fingers dirty...
================================================================================
                                
                                !!! DONE !!!
                                
================================================================================
