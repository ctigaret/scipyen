2022-01-26 10:37:43
AVOID building on networked drive - created a 2nd VDI image for a 2nd partition
(~100 GiB)

2022-01-26 18:48:50
attempted on Bruker Windows 10 VirtualBox image
    building apparently works but launching scipyen fails with
        python.exe - Ordinal not found
        in libpng.dll

2022-01-26 18:50:10
replicating the recipe on Hermes Windows 10 VirtualBox image
    the issue is replicated on Hermes (despite apparently successful build):

    python.exe - Ordinal Not Found
    the ordinal 169 could not be located in the dynamic link library
    e:\scipyen_sdk\bin\libpng16.dll

    and, at command line:
    Traceback (most recent call last):
  File "e:\scipyen\scipyen.py", line 16, in <module>
    path_to_vigraimpex = win32api.GetModuleFileName(win32api.LoadLibrary(vigraimpex_mod))
pywintypes.error: (182, 'LoadLibrary', 'The operating system cannot run %1.')

2022-01-26 20:46:50
might have something to do with INSTALL projects overwriting runtime dlls in scipyen_sdk


try re-installing in separate subdirs in scipyen_sdk, e.g.:
scipyen_sdk\zlib
scipyen_sdk\libjpeg
scipyen_sdk\libpng
scipyen_sdk\libtiff
scipyen_sdk\hdf5
(boost should NOT be affected)
scipyen_sdk_vigra


Building on network drive will
1) slow down the process
2) interfere with building processes (e.g. HDF5 and VIGRA)

================================================
1. Tools for building scipyen dependencies.
install system-wide (make sure there is enough space on C:\drive)
================================================
(see installers in the DownloadsForScipyen bundle)

python-3.9.7 -- with options:
    * for everyone
    * raise the limit on PATH
    
kate
doxygen
git
cmake -- with options:
    * add CMake to the system PATH for all users
    * create CMake desktop icon

Visual Studio Community Edition 2019 - make sure it is all uptodate

7zip for windows 10

MPICH
    dowload from https://www.microsoft.com/en-us/download/confirmation.aspx?id=57467
    msmpisetup.exe <- run this first
    msmpisdk.msi

    If you choose to install these, then edit
    scipyact.bat, vs64.bat and scipyact_vs64.bat
    to append:
    C:\Program Files (x86)\Microsoft SDKs\MPI\Include to %INCLUDE%
    C:\Program Files (x86)\Microsoft SDKs\MPI\Lib to %LIB% and %LIBPATH%
    C:\Program Files\Microsoft MPI\Bin to %PATH%

nasm: (for jpeg)
    use nasm-2.15.05-installer-x64.exe
    download from https://www.nasm.us/pub/nasm/releasebuilds/2.15.05/win64/nasm-2.15.05-installer-x64.exe
    run as administrator;
    manually add c:\Programs Files\NASM to %PATH%
Ruby
StrwaberryPerl

================================================
2. Choose a drive with enough space (>> 30 GiB)
================================================
On Bruker's Windows 10 VM Virtualbox I use
Z:\ drive (mapped network drive to a Linux parition
          on the Linux host)

-----------------------------------------------------------------------
2.1 create a python virtual environment 
-----------------------------------------------------------------------
e:\>virtualenv scipyenv

-----------------------------------------------------------------------
2.2 make scipyen_sdk and scipyen_sdk_src directories
-----------------------------------------------------------------------
e:\>mkdir scipyen_sdk
e:\>mkdir scipyen_sdk_src

-----------------------------------------------------------------------
2.3 clone scipyen git repo
-----------------------------------------------------------------------
e:\>git clone https://github.com/ctigaret/scipyen.git

clone master and dev branches; remain on dev branch for now:
    
    cd scipyen
    git checkout master
    git pull
    git checkout dev
    git pull
    

-----------------------------------------------------------------------
2.4 Copy the batch files from scipyen\doc\install\win32 scripts
to your home directory (%USERPROFILE%)
-----------------------------------------------------------------------


2.4.1:
    make directory Scripts in %USERPROFILE%, and copy there the following:
        scipyact.bat
        scipyact_vs64.bat
        vs64.bat
        scipyen.bat
        
    Purpose of these scripts:
        scipyact.bat - activates the python virtual environment
            MUST be called before launghing scipyen
            
        scipyact_vs64.bat - actvated the python virtual environment 
            AND the developer environment (under Visual Studio 2019)
            
        vs64.bat - activates ONLY the VS2019 development environment
        
        scipyen.bat - launches Scipyen
            MUST be called AFTER calling scipyact.bat
    
    EDIT scipyen.bat:
        change scipyendir to where sciyen git repo is located
        e.g.:
            set scipyendir=e:\scipyen
        
    EDIT scipyact.bat:
        edit activation_script to point to the virtual environment
        activation script
        
        edit SDK to point to where scipyen_sdk is
        
        make sure the paths to the Python environment are correct
        (i.e. %USERPROFILE%\AppData\Local\Programs\Python\Python39)
    
    Similarly, make sure the paths to the Python environment are correct
    in vs64.bat

from scipyen repo copy scipyen_startup.py to scipyenv\Scripts
NOTE: scipyenv is the virtual environment directory
2022-01-26 23:18:27
    copy scipyen_startup.py into scipyen_sdk directory

    
Add %USERPROFILE%\Scripts to your PATH:
    use Settings -> search for environment -> Edit environment variables
    for your account -> select PATH in top half of dialog -> click Edit ->
    -> add c:\Users\<xxx>\Scripts
    
    restart the command prompt
    
========================================================================
3. Install pip requirements in the virtual environment
========================================================================

From anywhere (but typically, the parent directory of scipyenv):
    
    3.1 activate the virtual environment, e.g.:
        e:\>scipyact
        
    3.2 call 'pip install -r ***' where *** is a pip_requirements_*_win64.txt
    found in scipyen\doc\install:
        e:\>pip install -r pip_requirements_0_win64.txt
        e:\>pip install -r e:\scipyen\doc\install\pip_requirements_1_win64.txt
        e:\>pip install -r e:\scipyen\doc\install\pip_requirements_2.txt
        e:\>pip install -r e:\scipyen\doc\install\pip_requirements_3.txt
        
     (be prepared to wait)   
     
    When alll is done, check that you have a working juoyter-qtconsole
     
========================================================================
4. Install VIGRA
========================================================================

Open a new command prompt, activate sciyen WITH VidualStudio development

e:\>scipyen_vs64

--------------------------------------------------------------------------------
4.1. Install vigra dependencies in scipyen_sdk
--------------------------------------------------------------------------------
vigra dependencies tree:
    
    vigra   <-  fftw3
                libjpeg <-  zlib
                libpng  <-  zlib 
                libtiff
                hdf5    <-  zlib
                boost_python <- boost <- icu (skipped)
                openexr (optional) <- Imath, openssl, icu
                python (done above)
                numpy, sphinx, nose (done above via pip)
                cmake (done above)
                
.......................................................................                
zlib
.......................................................................                
2022-01-26 19:18:15
use zlib github (Hermes)
git clone https://github.com/madler/zlib.git
make out-of-source build tree for cmake:
    mkdir zlib-build
    cd zlib-build
    cmake-gui ..\zlib
1st configure => select VS2019, x64, native compilers
    then check destinations go under e:\scipyen_sdk
    configure -> genertate -> open project (VS2019)
    select Release + x64
    Build ALL_BUILD
    Build INSTALL



.......................................................................                
2. libpng
.......................................................................                

2022-01-26 18:50:56
using libpng github (on Hermes):

git clone https://github.com/glennrp/libpng.git
make out-of-source build tree
mkdir libpng-build
cd libpng-build
cmake-gui ..\libpng
set the CMAKE_INSTALL_PREFIX to e:z\scipyen_sdk
configure -> generate -> open project (opens with VStudio)
    Select Release + x64
    Build ALL-BUILD
    Build INSTALL

2022-01-26 22:54:42
try this:
git clone https://github.com/winlibs/libpng.git
modify libpng/projects/vstudio2019/zlib.props to point to the zlib source above
in scipyact_vs64 call devenv -> open libpng/projects/vstudio2019/vstudio.sln
choose Release Library + x64 (i.e. build static)
in solution explorer select libpng -> Build

then configure vigra-build (using cmake-gui) to point to the static zlib and
libpng_a libraries in "libpng/projects/vstudio2019/x64/Release Library"

... AND IT WORKS!

.......................................................................                
jpeg - requires nasm
.......................................................................                

git clone https://github.com/winlibs/libjpeg.git

build with cmake-gui in out-of-source tree

cd scipyen_sdk_src
mkdir libjpeg-build
cd libjpeg-build

cmake-gui ..\libjpeg -DCMAKE_INSTALL_PREFIX=e:\scipyen_sdk -DDEPENDENCY_SEARCH_PREFIX=e:\scipyen_sdk
=> select VS 16 2019 + default native compilers
configure -> select installation to <path to>\scipyen_sdk
set WITH_JPEG7 and WITH_JPEG8 ON
configure until no more red lines; check no errors
generate -> check no errors
open project => opens VS2019 ->
    select release + x64
    Build ALL_BUILD
    Build INSTALL
            
    
.......................................................................                
fftw
.......................................................................                

download fftw-3.3.5-dll64.zip from http://www.fftw.org/install/windows.html

extract to scipyen_sdk_src\fftw3

cd into fftw3 then run:

lib /machine:x64 /def:libfftw3-3.def
lib /machine:x64 /def:libfftw3f-3.def
lib /machine:x64 /def:libfftw3l-3.def

then copy:
    copy *.exe ..\..\scipyen_sdk\bin\
    copy *.dll ..\..\scipyen_sdk\bin\
    copy *.lib ..\..\scipyen_sdk\lib\
    copy *.def ..\..\scipyen_sdk\lib\
    copy *.exp ..\..\scipyen_sdk\lib\
    copy *.h  ..\..\scipyen_sdk\include\
        
    *.exe and *.dll files to %SDK%\bin\
    *.lib, *.def, *.exp files to %SDK%\lib\
    *.h files (actually, only fftw3.h) to %SDK%\include\
    COPYING, COPYRIGHT, NEWS, README* to %SDK%\share\doc\fftw3\

.......................................................................                
tiff - requires jpeg; no support for OpenGL and deflate
.......................................................................                
In e:\scipyen_sdk_src run:
    git clone https://gitlab.com/libtiff/libtiff.git
    
build with cmake in out-of-source tree => generate VS2019 solution
    mkdir libtiff-build
    cd libtiff-build
    
    cmake-gui -DCMAKE_INSTALL_PREFIX=e:\scipyen_sdk -DDEPENDENCY_SEARCH_PREFIX=e:\scipyen_sdk ..\libtiff
        
    configure: first run: select VS 16 2019, X64;
    configure, set install_prefix to scipyen_sdk,
    configure -> generate -> open project opes VS2019
        select Release + x64
        Build -> ALL_BUILD
        Build INSTALL
        
check that it works:
    from http://www.simplesystems.org/libtiff/images.html download
    https://download.osgeo.org/libtiff/pics-3.8.0.tar.gz

    unpack with 7zip => %SDK%\share\libtiffpic

open command prompt, cd %SDK%\share\libtiffpic
tiffcp -lzw cramps.tif x.tif
tiffcmp cramps.tif x.tif
tiff2pdf -o cramps.pdf cramps.tif
tiff2bw jello.tif jello_bw.tif

also you may run tiffinfo on all tif files in this directory

.......................................................................                
boost - built w/o support for icu, mpi
.......................................................................                

from https://www.boost.org/doc/libs/1_77_0/more/getting_started/windows.html#get-boost
download boost_1_77_0.7z
extract to scipyen_sdk_src => will create scipyen_sdk_src\boost_1_77_0

Activate scipyen_vs64 environment

Create the b2 Boost.Build program

    cd boost_1_77_0\tools\build
    bootstrap
    .\b2 --prefix=e:\scipyen_sdk_src\Boost.Build toolset=msvc install

 Build & install boost

    cd e:\scipyen_sdk_src\boost_1_77_0


    Run:
        
    ..\Boost.Build\bin\b2 toolset=msvc threading=multi address-model=64 variant=release link=shared --prefix=e:\scipyen_sdk --build-type=complete msvc install

    NOTE: always use the same toolset setting!
    
    This will install:
    * boost headers (*.hpp) in scipyen_sdk\include\boost_1_77_0\boost
        => add this path e:\scipyen_sdk\include\boost_1_77_0\
            to the relevant variables when building vigra

    * the *.dll and *.lib files in scipyen_sdk\lib
    
.......................................................................                
hdf5
.......................................................................                
See:
https://portal.hdfgroup.org/display/support/Building+HDF5+with+CMake

recommended download: CMake-hdf5-1.12.0.zip
but you may widh to use CMake-hdf5-1.10.6.zip; in this case DISREGARD the
instructions to patch vigra for HDF5 below

extract CMake-hdf5-1.12.0.zip to e:\scipyen_sdk_src
    => creates  e:\scipyen_sdk_src\CMake-hdf5-1.12.0 directory
    
    cd CMake-hdf5-1.12.0
    
    # Create a build script by running the following line:
    # ATTENTION: NO COMMAS in the value to the -S option !
e:\scipyen_sdk_src\CMake-hdf5-1.12.0>echo ctest -S HDF5config.cmake,BUILD_GENERATOR=VS201964,INSTALLDIR=e:\scipyen_sdk -C Release -V -O hdf5.log > build.bat
    
    #run the build script
e:\scipyen_sdk_src\CMake-hdf5-1.12.0>build
    
This will generate a zip file inside the CMake-hdf5-1.12.0 directory:
    HDF5-1.10.6-win64.zip
    
    extract and merge almost all of its contents with the correspnoding 
    directories in e:\scipyen_sdk
    
    exceptions are:
        * all document files in the root HDF5-1.10.6-win64 directory should go to
            e:\scipyen_sdk\share\doc\hdf5
        
        * DO overwrite all files in the destination, when asked
        (this will replace zlib from above with a new one - it's OK)
        
.......................................................................                
VIGRA - without OpenEXR support
.......................................................................                
e:\scipyen_sdk_src>git clone https://github.com/ukoethe/vigra.git

patch the vigra source tree as per scipyen\doc\install\vigra_patches\README

Create out-of-source build tree:            
e:\scipyen_sdk_src>mkdir vigra-build
e:\scipyen_sdk_src>cd vigra-build

Then run:
    cmake-gui ..\vigra -DCMAKE_INSTALL_PREFIX=e:\scipyen_sdk -DDEPENDENCY_SEARCH_PREFIX=e:\scipyen_sdk
        
    in CMake GUI you must set:
        Boost_PYTHON_LIBRARY to 
            e:\scipyen_sdk\lib\boost_python39-vc142-mt-x64-1_77.lib
        
        deselect the following:
            BUILD_TESTS, AUTOEXEC_TESTS, TEST_VIGRANUMPY
        
        set CMAKE_INSTALL_PREFIX to e:\scipyen_sdk
        set LIB_SUFFIX to 64
        
        set CMAKE_INSTALL_PREFIX to
            e:\scipyen_sdk
            
        Check all other libraries and paths are correct, especially for the 
        dependencies built above (HDF5, jpeg, tiff, png)
        
        Check locations for Python are correct (yes, use the Python.exe in the 
                                                scipyenv)
        
        Configure repeatedly until no more red lines in the GUI.
        Check the output to have vigranumpy built and installed
        
        Finally press Generate to generate VStudio solution, then
        Click "open project" => Opens VStudio
        in VStudio, make sure Release + x64 are selected
        Select ALL_BUILD then run Build/Build Solution
        
    The doc_cpp.vcxproj and doc_python.vcxproj will likely FAIL
    Ignore that
    
    Then in Solution explorer select INSTALL project, right-click, build.
    
    This will install:
        header files in scipeyn_sdk\include (including "windows.h")
        vigranumpy in e:\scipyenv\lib\site-packages\vigra
        vigraimpex.lib in e:\scipyen_sdk\lib64
        vigraimpex.dll in e:\scipyen_sdk\bin
        doc in e:\scipyen_sdk\doc
        
        
================================================================================
final steps:
copy scipyen_startup.py
from sciyen\doc\install\python\windows
to scipyenv\scripts
        
