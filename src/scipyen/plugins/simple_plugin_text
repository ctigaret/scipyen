A Scipyen plugin is a regular Python module with at least one of the two members below:
    • a module-level variable `__scipyen_plugin__` (with any value) 
    • a module-level function `init_scipyen_plugin`

Scipyen plugin modules can be imported directly at runtime via `import` statements in Scipyen's console.

If the plugin defines an `init_scipyen_plugin` function, Scipyen will use it to generate a menu/submenu(s)/menu item hierarchy in the menu bar of Scipyen's main window. This function must return a mapping str ↦ function, where:
    • keys are strings with a menu path (left → right entries separated by the '|' character) in the menu bar;
    • values are functions defined in the plugin module and are called when the last item in the hierarchy above has been triggered by user interaction.

In the example plugin used to show this message, the `init_scipyen_plugin` function returns the following dictionary:
    'Help|About Plugins|Simple Plugin Examples|Hello World': my_plugin_function,
    'Help|About Plugins|Simple Plugin Examples|Hello World (GUI)': helloWorld
    'Help|About Plugins|Simple Plugin Examples|Hello World (System console)': output_to_system_console.

A plugin module can be placed anywhere in Scipyen's code tree. However, when Scipyen is run as a 'frozen' application (i.e., bundled with PyInstaller), user-defined plugins must be stored outside Scipyen's tree, in a directory of your choice (configured from Scipyen main window `Settings` menu).

Information about the currently loaded plugin modules is available through the following attributes, properties, or methods of Scipyen's Main Window (`mainWindow` variable in console):
    plugins, pluginModules, pluginNames, UIPlugins, UIPluginMenus, UIPluginNames, getMenusForUIPlugin
    
Bugs: 
Isolated menu items - which should be placed on their own in the menu bar - are not visible. As a workaround, please avoid single-item menu paths in the dict returned by `init_scipyen_plugin` function.
Many more to be discovered...
