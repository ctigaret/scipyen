Point = collections.namedtuple('Point', ['x', 'y'])
p = Point(11, y=22)
from core.utilities import NestedFinder
aa = {"a":{1:"1", "2":2}, "b":3, "c":[4,5,[6,7,8], (9,10)], "d":{1:[1,2,3], 2:{4:5, 6:7}}}
d = {"a":{"a":1,"b":2,"c":[3,4,[5,6]]}, "b":{7:8, 9:[10,11]}, 12:{"a":(2,4,6), "c":"txt"}}
dd = {"a":{"a":1,"b":2,"c":[3,4,[5,6]]}, "b":{7:8, 9:[10,11]}, "c":{"a":(2,4,6), "d":"txt"}}
ddd = {"a":{"a":1,"b":2,"c":[3,4,[5,6]]}}
aaa = {"a":{1:"1", "2":2, 2:"2"}, "b":3, "c":[4,5,[6,7,8], (9,10)], "d":{1:[1,2,3], 2:{4:5, 6:7}}, "p":p}
n = np.arange(5)
d["b"][9].append(np.arange(7))
d["b"][9].append(np.arange(8))
d["a"]["c"].append(np.arange(9))
d["b"]["9"]=np.arange(8)
d["a"]["e"] = p



from core.utilities import NestedFinder
from collections import namedtuple
import operator
Point = namedtuple("Point", ("x", "y"))
p = Point(11,22)
ar = np.arange(155)
fn = functools.partial(np.isclose, atol=1e-2, rtol=1e-2)
d = {"a":{"a":1,"b":2,"c":[3,4,[5,6]]}, "b":{7:8, 9:[10,11, np.arange(13)],"9":np.arange(13), "d":p}, 12:{"a":(2,4,6), "c":"txt"},"d":p, "e":(1, p), "f":functools.partial(np.isclose, atol=1e-2, rtol=1e-2)}
%clear

