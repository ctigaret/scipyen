These are instructions for installing Scipyen (and building its 
dependencies) on Windows 10

================================================================================
Clone Scipyen git repo (dev branch):
================================================================================
1. Find a good location (no spaces, punctuation or funny characters in the path
name, make sure there is room on the drive)

gh repo clone ctigaret/scipyen (if having github account)
or
git clone https://github.com/ctigaret/scipyen.git

git checkout dev
git pull

Since you read this, you must have already done it.


================================================================================
PREAMBLE
================================================================================

# TODO: 2021-10-08 09:01:57 
# Revise this to reflect installation inside VIRTUAL_ENV directory

We follow the following convention:

1) all source code and built software resides in a ROOT directory on a LOCAL
drive (i.e. NOT mapped network drive or anything else) and WITHOUT spaces or
special characters (accented, punctuation, etc.) in the path names.

On this machine, the ROOT is E:\
NOTE it can also be the virtual environment directory (VIRTUAL_ENV)

It goes without saying that you need read/write acess to that directory.

The ROOT will end up containing the following subdirectories:
    ROOT\src        - contains the source trees, including cloned git repositories
                    NOTE this must be created manually
                    
    ROOT\bin        - installations will place built *.exe and *.dll here
    ROOT\lib        - installations will place built *.lib files here
    ROOT\include    - installations will place header files (e.g., *.h, *.hxx, *.hpp) here
    ROOT\share      - installations will place other auxiliary files here
    
    Optional (these can be placed somewhere else more convenient):
    ROOT\downloads  - contains downloaded installers for ancillary software (see
                      below) and archives of source trees NOT available from
                      git/gitlab (e.g., boost_1_77_0.7z, etc.)

    The directories ("bin", "lib", "include", "share") will be created during the
    installation after building.

    #AFTER BUILDING AND INSTALLING THE FIRST LIBRARY (zlib) edit the
    #environment variables for your account (Using windows settings) to:

    #add ROOT\bin to PATH
    #create INCLUDE=ROOT\include
    #create LIB=ROOT\lib;ROOT\lib64
    
    The "downloads" directory contains software installers for required software
    as well as zip archives for source code trees that cannot be obtained from
    online repositories (git, gitlab).

    NOTE: This layout makes it very easy for CMake-based building of software
    from source trees (as most of the ones below are)

2) All source code trees for various libraries reside in their own subdirectories
in ROOT\src

3) DRIVE SPACE REQUIREMENTS
----------------------------
All source code trees and built dependencies will require about 20-30 GiB (tbc).
so the drive containing the ROOT directory should have well in excess of that.

Visual Studio and Code, Python and user-installed python packages via pip,
usually reside on the C: drive (the pip-installed packages reside inside the
Users\Your Account\AppData\Programs\PythonXY\Library\site-packages).
Visual Studio also needs extra temporary drive space during building.
To be comfortable, there should be a free space in excess of 20 GiB on your
C: drive.

Please take this into account if you decide to place ROOT on the C: drive.

4) Compiler & toolset
-----------------------
The C compiler identification is MSVC 19.29.30133.0
The CXX compiler identification is MSVC 19.29.30133.0
Windows-10.0.19043

For every library built in Visual Studio you need to make an x64-Release
configuration
    Build configurations: x64 release,
        For CMake-based projects (as mot of them are) the CMAKE_BUILD_TYPE will
        read "RelWithDebInfo"
    toolset msvc_x64_x64 (as reported by VisualStudio)

Configure to install each library in ROOT (see above).

    For CMake-based projects build with Visual Studio 2019 the installation
    directory MUST be configured using the Advanced settings section of the
    IDE's CMake settings - DO NOT change CMAKE_INSTALL_PREFIX.

    Generally is it a BAD idea to make direct changes to CMake settings in
    VisuaStudio - the only exception is building ViGRA but we will use cmake-gui
    to generate a solution (*.sln) file.

================================================================================
Install toolkits (installers and archives in scipyen-dependencies, NOT in here)
================================================================================
--------------------------------------------------------------------------------
NOTE: Below, changes to PATH are to be made permanent using Windows Settings -> 
search "envir" -> select "Edit environment variables for your account"
--------------------------------------------------------------------------------
Visual Studio 2019 Community Edition    <- vs_community__2067806454.1615472217.exe
                                            launch the installer make sure it is
                                            uptodate

                                            from "Workloads" select to install:
                                                Azure development
                                                Desktop development with C++
                                                .NET desktop development

                                            from "Installation details" expand
                                            "Desktop development with C++" and in
                                            the "Optional" group select (or make
                                            sure they are selected):
                                                MSVC v142 - VS 2019 C++x64/x86 built toolkit
                                                Windows 10 SDK (10.0.18362.0)


Git                                     <- Git-2.33.0.2-64-bit.exe

GitDesktop                              <- GitHubDesktopSetup-x64.exe

gh                                      <- gh_2.0.0_windows_amd64.msi

kate                                    <- kate-21.08.1-1422-windows-msvc2019_64-cl.exe (VERY GOOD text editor)

doxygen                                 <- doxygen-1.9.2-setup.exe

7z2103-x64.exe                          <- to expand *.7z archives

nasm-2.15.05-installer-x64.exe          <- https://www.nasm.us/pub/nasm/releasebuilds/2.15.05/win64/nasm-2.15.05-installer-x64.exe
                                            run as administrator;
                                            manually add c:\Programs Files\NASM to %PATH%

strawberry-perl-5.32.1.1-64bit.msi      <- add C:\Strawberry\perl\bin to PATH
                                            (only if necessary; the installer
                                             should have done that)
rubyinstaller-devkit-3.0.2-1-x64.exe

node-v14.18.0-x64.exe                   <- from https://nodejs.org/en/download/

MPICH
    dowload from https://www.microsoft.com/en-us/download/confirmation.aspx?id=57467
    msmpisetup.exe <- run this first
    msmpisdk.msi

    If you choose to install these, then edit
    scipyact.bat, vs64.bat and scipyact_vs64.bat
    to append:
    C:\Program Files (x86)\Microsoft SDKs\MPI\Include to %INCLUDE%
    C:\Program Files (x86)\Microsoft SDKs\MPI\Lib to %LIB% and %LIBPATH%
    C:\Program Files\Microsoft MPI\Bin to %PATH%

    NOTE, however, that I did not yet figure out why boost build did
    not detect MPI parallel and icu libraries...


NOTE: ALternative to building openssl (see below) is to install Win64 open SSL
(non-light version)
Get it from here: Win32/Win64 OpenSSL Installer for Windows - Shining Light Productions (slproweb.com)
Grab the 140Mb installer (either *.exe or *.msi) for Win64 OpenSSL v3.0.0 â€“ this is the non-light installer.

NSIS, WiX

------------------------------------------------
# local installation (into %VIRTUAL_ENV%):
------------------------------------------------
cmake-3.21.3-windows-x86_64             <- cmake-3.21.3-windows-x86_64.zip
                                            unpack and move subdirs into %VIRTUAL_ENV% (bin, and so forth)

depends22_x64.zip                       <- for debugging (optional) -
                                            unpack an place in ROOT\bin

WinDiff.zip                             <- unpack an place in ROOT\bin

jom_1_1_3.zip                           <- unpack and copy *.bat, *.exe, *.xml to %VIRTUAL_ENV%\bin


================================================================================
1. INSTALL PYTHON, CREATE AND ACTIVATE THE ENVIRONMENT
================================================================================
See scipyen\doc\install\Python\Windows\README.txt

* When the environment is activated, ROOT is VIRTUAL_ENV

NOTE: the vitual environemnt is NOT relocatable !!!

By consequence, the virtual environment folder (with all the libraries built
inside it) CANNOT be copied on another path on the machine, or on other machine
(unless, of coure the structure of the path leading to it is identical to the
 one on the machine the virtual enviornemnt was built on)

================================================================================
2. BUILD AND INSTALL DEPENDENCIES
================================================================================
All will be built from the comand prompt, with:
    
2.1) BOTH the virtual Python and Visual Studio 2019 x64 development 
    environments ACTIVATED
    
    (i.e., run scipyact_vs64.bat, see doc/install/Python/Windows/README.txt).
        
2.2) cd to the %VIRTUAL_ENV%\src directory

2.3) Visual Studio 2019 launched using the 'devenv' command
(whenever the instructions say to use Visual Studio 2019)

CAUTION: Sometimes visual Studio does not bring up a GUI but jumps directly
to the editor, in order to change CMake settings for build configurations.

Make sure VS2019 is THE ONLY VS installed!


In these cases: 
    2.3.1) duplicate the "windows-default" preset to create a new one, named
"windows-release", set the build type to "RelWithDebinfo", make sure it is all
for x64 platform (or "address model").
    2.3.2) caling build -> install will place the output in a subdirectory
    out\install\windows-release, with subdirectories such as bin, lib, include, doc, share 
    
    Copy their contents to directories with the same name inside %VIRTUAL_ENV%\
        (create these directories first) e.g.:
            
    out\install\windows-release\*.*bin to %VIRTUAL_ENV%\bin\
        
    and so on
    
    So at the end, the VIRTUAL_ENV will contain:
        
        
    %VIRTUAL_ENV%\
        bin
        doc
        etc
        include
        Lib             (or lib)
        lib64
        Scripts
        share
        src
        
    With etc being optional
        


Build in order:
--------------------------------------------------------------------------------
1. zlib
--------------------------------------------------------------------------------


from https://zlib.net/ download zlib source code, version 1.2.11,
zipfile format (730K,
SHA-256 hash d7510a8ee1918b7d0cad197a089c0a2cd4d6df05fee22389f67f115e738b178d)

extract to %VIRTUAL_ENV%\src => %VIRTUAL_ENV%\src\zlib-1.2.11

NOTE: this is a CMake project

launch Visual Studio 2019:
    devenv

open the solution zlib-1.2.11\contrib\vstudio\vc14\zlibvc.sln

    retarget the solution
    select Release and x64
    In solution explorer select xlibvc -> right click for Properties -> change
    all from zlibwapi.* to zlib.* as follows:
     Configuration Properties
        General:
            Target Name:    zlib

        Linker:
            General:
                Output File:    $(OutDir)zlib.dll
            Debugging:
                Generate Program Database file:     $(OutDir)zlib.pdb
                Map file Name:                      $(OutDir)zlib.map
            Advanced:
                Import Library:                     $(OutDir)zlib.lib

    build solution
    from zlib-1.2.11\contrib\vstudio\vc14\x64\ZlibDllrelease copy:
        zlib.dll to  %VIRTUAL_ENV%\bin\
        zlib.lib, zlib.exp to  %VIRTUAL_ENV%\lib\

    from zlib-1.2.11 copy:
        zlib.h, zconf.h to %VIRTUAL_ENV%\include\
        zlib.3 to %VIRTUAL_ENV%\man\man3\
        README,FAQ, zlib.3.pdf, doc\*.* to %VIRTUAL_ENV%\doc\zlib\

ALTERNATIVELY:
open the %VIRTUAL_ENV%\src\zlib-1.2.11 directory as "Folder" in VisualStudio 2019
    create x64-Release configuration, build type: RelWithDebInfo
    save and refresh CMake cache
    go to advanced settings:
        select Install directory: the ROOT (see above) where "bin", "include",
            "lib" and "share" subdirectories will be created.

    save configuration
    build: Build menu -> Build All
    install: Build menu -> Install zlib
    close project
    close Visual Studio


--------------------------------------------------------------------------------
2. libpng
--------------------------------------------------------------------------------

download lpng1637.zip

from https://sourceforge.net/projects/libpng/files/libpng16/1.6.37/lpng1637.zip/download?use_mirror=jztkft

extract to %VIRTUAL_ENV%\src => %VIRTUAL_ENV%\src\lpng1637
copy %VIRTUAL_ENV%\src\lpng1637\scripts\pnglibconf.h.prebuilt
to   %VIRTUAL_ENV%\src\lpng1637\pnglibconf.h

to build: launch visual studio 2019
    devenv

    then "open project or solution" -> choose:
    %VIRTUAL_ENV%\src\lpng1637\projects\vstudio\vstudio.sln

accept all projects

accept migration to VS 14.2 (VS community edition 2019) -> adaps all *.vcxproj files in
the subdirectories

open configuration manager,
    in active solution platform (currently, win32) choose <new> ->
        choose new platform: x64, check ON create new project platforms

    in Active solution configurations select Release

    in the Build check ONLY libpng or at least UNCKECK zlib
    (we will use the zlib built as above).


    open properties for libpng (sub)project -> right click -> properties
        -> Configuration properties:
            -> VC++ directories:
                -> Include directories -> add %VIRTUAL_ENV%\\include
                -> External include directories -> add v\include
                -> Libray directories -> add %VIRTUAL_ENV%\\lib;%VIRTUAL_ENV%\\lib64;%VIRTUAL_ENV%\\bin
            -> C/C++:
                -> General:
                    -> Additional include directories -> add %VIRTUAL_ENV%\\src\lpng1637;%VIRTUAL_ENV%\\include
                    -> Treat warning as errors -> No (/WX-)

            -> Linker:
                -> General:
                    -> Additional library directories -> add %VIRTUAL_ENV%\\lib;%VIRTUAL_ENV%\\lib64

    Build menu -> build solution (Ctrl+Shift+B)
    the built files are in
    %VIRTUAL_ENV%\src\lpng1637\projects\vstudio\x64\Release
    from there:
        copy libpng16.dll, libpng16.pdb to %VIRTUAL_ENV%\bin
        copy libpng16.lib, libpng16.exp to %VIRTUAL_ENV%\lib

    also copy all include files (*.h) from %VIRTUAL_ENV%\src\lpng1637 to %VIRTUAL_ENV%\include

--------------------------------------------------------------------------------
3. jpeg9d (optional, see jpeg-turbo, below)
--------------------------------------------------------------------------------
Skip this

--------------------------------------------------------------------------------
4. jpeg-turbo => supplies both jpeg AND jpeg-turbo - taken from github
--------------------------------------------------------------------------------
cd %VIRTUAL_ENV%\src

gh repo clone winlibs/libjpeg
or
git clone https://github.com/winlibs/libjpeg.git

devenv

open "folder" in VisualStudio 2019 -> CMake project
configuration x64-Release:
    build type RelWithDebInfo
    toolset msvc_x64_x64
    CMake generator: Ninja
    CMake variables:
        CMAKE_BUILD_TYPE=RelWithDebInfo
        ENABLE_SHARED (true)
        ENABLE_STATIC (true)
        FORCE_INLINE (true)
        WITH_ARITH_DEC (true)
        WITH_ARITH_ENC (true)
        WITH_JPEG7 (true)
        WITH_JPEG8 (true)
        WITH_MEM_SCRDST (true)
        WITH_SIMD (true)
        WITH_TURBOJPEG (true)

--------------------------------------------------------------------------------
5. libtiff
--------------------------------------------------------------------------------

    git clone https://gitlab.com/libtiff/libtiff.git
    
    => will create a clone of libtiff repository in %VIRTUAL_ENV%\src\libtiff

open visual studio 
    devenv
    
    -> Open a folder -> select %VIRTUAL_ENV%\src\libtiff

read through the CMake output

create configuration x64-Release (in CMake Setting -> Configurations)

Build menu -> build all
Buils menu -> Install tiff

check that it works: 
    from http://www.simplesystems.org/libtiff/images.html download 
    https://download.osgeo.org/libtiff/pics-3.8.0.tar.gz
    
    unpack with 7zip => %VIRTUAL_ENV%\src\libtiffpics

open command prompt, cd %VIRTUAL_ENV%\src\libtiffpics
tiffcp -lzw cramps.tif x.tif
tiffcmp cramps.tif x.tif
tiff2pdf -o cramps.pdf cramps.tif
tiff2bw jello.tif jello_bw.tif

also you may run tiffinfo on all tif files in this directory
--------------------------------------------------------------------------------
6. install fftw3
--------------------------------------------------------------------------------

download fftw-3.3.5-dll64.zip from http://www.fftw.org/install/windows.html

Extract all into %VIRTUAL_ENV%\\src\fftw3

As per the above web page create import libraries (from an x64 command prompt):

cd %VIRTUAL_ENV%\\src\fftw3

lib /machine:x64 /def:libfftw3-3.def
lib /machine:x64 /def:libfftw3f-3.def
lib /machine:x64 /def:libfftw3l-3.def

then copy:
    *.exe and *.dll files to %VIRTUAL_ENV%\\bin
    *.lib, *.def, *.exp files to %VIRTUAL_ENV%\\lib
    *.h files (actually fftw3.h) to %VIRTUAL_ENV%\\include

--------------------------------------------------------------------------------
7. Imath (NOTE this is "eye-math" not "ell-math" !)
--------------------------------------------------------------------------------

get it from https://github.com/AcademySoftwareFoundation/Imath

clone git repo:
gh repo clone AcademySoftwareFoundation/Imath
or
git clone https://github.com/AcademySoftwareFoundation/Imath.git

devenv

open "folder" in VS2019; as above make x64 release configuration, select %VIRTUAL_ENV%
for install directory (is possible, else install manually from the
out/install/release tree).

Build all
Install Imath

--------------------------------------------------------------------------------
8. openssl
--------------------------------------------------------------------------------
git clone https://github.com/winlibs/openssl.git
or
gh repo clone winlibs/openssl

follow the instructions at
https://github.com/openssl/openssl/blob/master/NOTES-WINDOWS.md#native-builds-using-visual-c++

In a nutshell:

    cd openssl
    perl Configure VC-WIN64A --prefix=%VIRTUAL_ENV% --openssldir=%VIRTUAL_ENV%
    nmake
    nmake tests
    nmake install

--------------------------------------------------------------------------------
9. ICU
--------------------------------------------------------------------------------
gh repo clone unicode-org/icu
or
git clone https://github.com/unicode-org/icu.git

devenv
    open solution  %VIRTUAL_ENV%\src\icu\icu4c\source\allinone\allinone.sln
    project -> retarget solution
    choose Release x64;
    open configuration manager, deselect all *_UWP from build column
    build solution

copy
    %VIRTUAL_ENV%\src\icu\icu4c\bin64\*.* to %VIRTUAL_ENV%\bin
    %VIRTUAL_ENV%\src\icu\icu4c\include\*.* to %VIRTUAL_ENV%\include
    %VIRTUAL_ENV%\src\icu\icu4c\lib64\*.* to %VIRTUAL_ENV%\lib64

--------------------------------------------------------------------------------
10. openEXR
--------------------------------------------------------------------------------
get it from https://github.com/AcademySoftwareFoundation/openexr
cd to %VIRTUAL_ENV%\src and clone git repo :

gh repo clone AcademySoftwareFoundation/openexr
or
git clone https://github.com/AcademySoftwareFoundation/openexr.git

open Visual Studio -> open folder -> %VIRTUAL_ENV%\src\openexr
create x64 release
Imath should be recognized
build all
install openexr

--------------------------------------------------------------------------------
11. HDF5
--------------------------------------------------------------------------------
get the CMake version of the source tree :
from https://www.hdfgroup.org/downloads/hdf5/source-code/
download CMake-hdf5-1.12.1.zip
extract
copy build-VS2019-64-virtualenv.bat from downloads to
%VIRTUAL_ENV%\\src\CMake-hdf5-1.12.1\
(edit INSTALLDIR=%VIRTUAL_ENV%)

Open command prompt, run vs64

cd to %VIRTUAL_ENV%\\src\CMake-hdf5-1.12.1 and execute build-VS2019-64-vitrtualenv

don't worry about test 1726 - H5DUMP-tfloatsattrs (Failed) message
(see here https://forum.hdfgroup.org/t/h5dump-test-failed/8762/2)

to install, extract the newly created zip file:

%VIRTUAL_ENV%\\src\CMake-hdf5-1.12.1\build\HDF5-1.12.1-win64.zip

then copy the contents of the subdirectories to their corresponding directories
in %VIRTUAL_ENV%\
(e.g. from bin\*.* to %VIRTUAL_ENV%\bin, etc)
NOTE: DO NOT copy zconf.h ! we use the one already present in %VIRTUAL_ENV%\include
(they are identical, and the latter has been provided by zlib, see above)

--------------------------------------------------------------------------------
12.Install Boost libraries:
--------------------------------------------------------------------------------

from https://www.boost.org/doc/libs/1_77_0/more/getting_started/windows.html#get-boost
download boost_1_77_0.7z
extract to %VIRTUAL_ENV%\\src\ => will create %VIRTUAL_ENV%\\src\boost_1_77_0

........................................
12.1 Create the b2 Boost.Build program
........................................

cd boost_1_77_0\tools\build
bootstrap
.\b2 --prefix=%VIRTUAL_ENV%\\Boost.Build toolset=msvc install

(e.g., .\b2 --prefix=E:\Boost.Build\bin)

........................................
12.2 Build & install boost
........................................

cd %VIRTUAL_ENV%\src\boost_1_77_0

run (NOTE: make sure to replace root with the full real path; as per PREAMBLE,
     NO spaces in the ROOT path are allowed; where this is impossible, then all
paths below should be enclosed in double-quotes):

NOTE: always use the same toolset setting!

(skip this ) %VIRTUAL_ENV%\Boost.Build\bin\b2 toolset=msvc threading=multi address-model=64 variant=release link=shared -prefix=%VIRTUAL_ENV% --build-type=complete msvc stage

%VIRTUAL_ENV%\Boost.Build\bin\b2 toolset=msvc threading=multi address-model=64 variant=release link=shared --prefix=%VIRTUAL_ENV% --build-type=complete msvc install

When prefix is a drive this will install:
    * boost headers (*.hpp) in %VIRTUAL_ENV%\include\boost_1_77_0\boost
        => add this to the INCLUDE environment variable

    * the *.dll and *.lib files in %VIRTUAL_ENV%\lib

Test as per Getting Started page, create, build and run:
1) header-only program in VS2019 (see heading 4 Build a simple program using boost)
2)


--------------------------------------------------------------------------------
13. Build and install Qt5 - this is optional - you may instead install PyQt5 directly using pip
--------------------------------------------------------------------------------
Dependencies:
    openssl <- perl, nasm
    icu
    Clang <- This is optional (only required to build qdoc documentation) and is
                skipped here â€“
            For online Qt documentation go to https://doc.qt.io/qt-5/

............................
13.1 Clone the Qt5 repo
............................

cd %VIRTUAL_ENV%\src
git clone git://code.qt.io/qt/qt5.git
cd Qt5
git checkout 5.12
perl init-repository --module-subset=default,-qtwebengine

............................
13.2 Configure the build
............................

<path-where-scipyen-repo-is>\doc\install\qt5vars.bat

cd ..

mkdir qt5-build && cd qt5-build

..\\qt5\configure --prefix=%VIRTUAL_ENV% -opensource -confirm-license -nomake examples -nomake tests -mp -opengl es2 â€“qt-zlib â€“qt-libjpeg â€“qt-libpng â€“qt-freetype â€“qt-pcre â€“qt-harfbuzz -no-feature-location-labs-plugin

#################################################################################
BELOW is the configuration output on Bruker machine
#################################################################################

(x64 scipyenv) E:\scipyenv\src\qt5-build>..\\qt5\configure --prefix=%VIRTUAL_ENV% -opensource -confirm-license -nomake examples -nomake tests -mp -opengl es2 -qt-zlib -qt-libjpeg -qt-libpng -qt-freetype -qt-pcre -qt-harfbuzz -no-feature-location-labs-plugin
+ cd qtbase
+ E:\scipyenv\src\qt5\qtbase\configure.bat -top-level --prefix=E:\scipyenv -opensource -confirm-license -nomake examples -nomake tests -mp -opengl es2 -qt-zlib -qt-libjpeg -qt-libpng -qt-freetype -qt-pcre -qt-harfbuzz -no-feature-location-labs-plugin
Running syncqt ...
<srcbase> = E:/scipyenv/src/qt5/qtbase
<bldbase> = E:/scipyenv/src/qt5-build/qtbase
<outbase> = E:/scipyenv/src/qt5-build/qtbase
Bootstrapping qmake ...

jom 1.1.3 - empower your cores


This is the Qt Open Source Edition.

You have already accepted the terms of the Open Source license.

Running configuration tests...
Done running configuration tests.

Configure summary:

Build type: win32-msvc (x86_64, CPU features: sse sse2)
Compiler: msvc 192930136
Configuration: sse2 aesni sse3 ssse3 sse4_1 sse4_2 avx avx2 avx512f avx512bw avx512cd avx512dq avx512er avx512ifma avx512pf avx512vbmi avx512vl compile_examples f16c largefile msvc_mp precompile_header rdrnd shani x86SimdAlways shared debug_and_release release debug build_all c++11 c++14 c++1z concurrent dbus no-pkg-config release_tools stl
Build options:
  Mode ................................... debug and release; default link: debug; optimized tools
  Optimize release build for size ........ no
  Building shared libraries .............. yes
  Using C standard ....................... C89
  Using C++ standard ..................... C++1z
  Using gold linker ...................... no
  Using precompiled headers .............. yes
  Using LTCG ............................. no
  Target compiler supports:
    SSE .................................. SSE2 SSE3 SSSE3 SSE4.1 SSE4.2
    AVX .................................. AVX AVX2
    AVX512 ............................... F ER CD PF DQ BW VL IFMA VBMI
    Other x86 ............................ AES F16C RDRAND SHA
  Build parts ............................ libs tools
  App store compliance ................... no
Qt modules and options:
  Qt Concurrent .......................... yes
  Qt D-Bus ............................... yes
  Qt D-Bus directly linked to libdbus .... no
  Qt Gui ................................. yes
  Qt Network ............................. yes
  Qt Sql ................................. yes
  Qt Testlib ............................. yes
  Qt Widgets ............................. yes
  Qt Xml ................................. yes
Support enabled for:
  Using pkg-config ....................... no
  udev ................................... no
  Using system zlib ...................... no
Qt Core:
  DoubleConversion ....................... yes
    Using system DoubleConversion ........ no
  GLib ................................... no
  iconv .................................. no
  ICU .................................... no
  Tracing backend ........................ <none>
  Logging backends:
    journald ............................. no
    syslog ............................... no
    slog2 ................................ no
  Using system PCRE2 ..................... no
Qt Network:
  getifaddrs() ........................... no
  IPv6 ifname ............................ no
  libproxy ............................... no
  OpenSSL ................................ yes
    Qt directly linked to OpenSSL ........ no
  OpenSSL 1.1 ............................ yes
  DTLS ................................... yes
  SCTP ................................... no
  Use system proxies ..................... yes
Qt Gui:
  Accessibility .......................... yes
  FreeType ............................... yes
    Using system FreeType ................ no
  HarfBuzz ............................... yes
    Using system HarfBuzz ................ no
  Fontconfig ............................. no
  Image formats:
    GIF .................................. yes
    ICO .................................. yes
    JPEG ................................. yes
      Using system libjpeg ............... no
    PNG .................................. yes
      Using system libpng ................ no
  EGL .................................... yes
  OpenVG ................................. no
  OpenGL:
    ANGLE ................................ yes
    Combined ANGLE Library ............... no
    Desktop OpenGL ....................... no
    Dynamic OpenGL ....................... no
    OpenGL ES 2.0 ........................ yes
    OpenGL ES 3.0 ........................ no
    OpenGL ES 3.1 ........................ no
    OpenGL ES 3.2 ........................ no
  Vulkan ................................. no
  Session Management ..................... yes
Features used by QPA backends:
  evdev .................................. no
  libinput ............................... no
  INTEGRITY HID .......................... no
  mtdev .................................. no
  tslib .................................. no
  xkbcommon .............................. no
  X11 specific:
    XLib ................................. no
    XCB Xlib ............................. no
    EGL on X11 ........................... no
QPA backends:
  DirectFB ............................... no
  EGLFS .................................. no
  LinuxFB ................................ no
  VNC .................................... no
  Mir client ............................. no
  Windows:
    Direct 2D ............................ yes
    DirectWrite .......................... yes
    DirectWrite 2 ........................ yes
Qt Sql:
  SQL item models ........................ yes
Qt Widgets:
  GTK+ ................................... no
  Styles ................................. Fusion Windows WindowsVista
Qt PrintSupport:
  CUPS ................................... no
Qt Sql Drivers:
  DB2 (IBM) .............................. no
  InterBase .............................. no
  MySql .................................. no
  OCI (Oracle) ........................... no
  ODBC ................................... yes
  PostgreSQL ............................. no
  SQLite2 ................................ no
  SQLite ................................. yes
    Using system provided SQLite ......... no
  TDS (Sybase) ........................... no
Qt Testlib:
  Tester for item models ................. yes
Qt SerialBus:
  Socket CAN ............................. no
  Socket CAN FD .......................... no
Further Image Formats:
  JasPer ................................. no
  MNG .................................... no
  TIFF ................................... yes
    Using system libtiff ................. yes
  WEBP ................................... yes
    Using system libwebp ................. no
Qt QML:
  QML network support .................... yes
  QML debugging and profiling support .... yes
  QML sequence object .................... yes
  QML list model ......................... yes
  QML XML http request ................... yes
  QML Locale ............................. yes
  QML delegate model ..................... yes
Qt Quick:
  Direct3D 12 ............................ yes
  AnimatedImage item ..................... yes
  Canvas item ............................ yes
  Support for Qt Quick Designer .......... yes
  Flipable item .......................... yes
  GridView item .......................... yes
  ListView item .......................... yes
  TableView item ......................... yes
  Path support ........................... yes
  PathView item .......................... yes
  Positioner items ....................... yes
  Repeater item .......................... yes
  ShaderEffect item ...................... yes
  Sprite item ............................ yes
Qt Scxml:
  ECMAScript data model for QtScxml ...... yes
Qt Gamepad:
  SDL2 ................................... no
Qt 3D:
  Assimp ................................. yes
  System Assimp .......................... no
  Output Qt3D Job traces ................. no
  Output Qt3D GL traces .................. no
  Use SSE2 instructions .................. yes
  Use AVX2 instructions .................. no
  Aspects:
    Render aspect ........................ yes
    Input aspect ......................... yes
    Logic aspect ......................... yes
    Animation aspect ..................... yes
    Extras aspect ........................ yes
Qt 3D Renderers:
  OpenGL Renderer ........................ yes
Qt 3D GeometryLoaders:
  Autodesk FBX ........................... no
Qt Wayland Client ........................ no
Qt Wayland Compositor .................... no
Qt Bluetooth:
  BlueZ .................................. no
  BlueZ Low Energy ....................... no
  Linux Crypto API ....................... no
  WinRT Bluetooth API (desktop & UWP) .... yes
Qt Sensors:
  sensorfw ............................... no
Qt Quick Controls 2:
  Styles ................................. Default Fusion Imagine Material Universal
Qt Quick Templates 2:
  Hover support .......................... yes
  Multi-touch support .................... yes
Qt Positioning:
  Gypsy GPS Daemon ....................... no
  WinRT Geolocation API .................. yes
Qt Location:
  Qt.labs.location experimental QML plugin . no
  Geoservice plugins:
    OpenStreetMap ........................ yes
    HERE ................................. yes
    Esri ................................. yes
    Mapbox ............................... yes
    MapboxGL ............................. no
    Itemsoverlay ......................... yes
QtXmlPatterns:
  XML schema support ..................... yes
Qt Multimedia:
  ALSA ................................... no
  GStreamer 1.0 .......................... no
  GStreamer 0.10 ......................... no
  Video for Linux ........................ no
  OpenAL ................................. no
  PulseAudio ............................. no
  Resource Policy (libresourceqt5) ....... no
  Windows Audio Services ................. yes
  DirectShow ............................. yes
  Windows Media Foundation ............... yes
  Media player backend ................... DirectShow
Qt Tools:
  QDoc ................................... no

Note: No wayland-egl support detected. Cross-toolkit compatibility disabled.

WARNING: QDoc will not be compiled, probably because libclang could not be located. This means that you cannot build the Qt documentation.

Either ensure that llvm-config is in your PATH environment variable, or set LLVM_INSTALL_DIR to the location of your llvm installation.
On Linux systems, you may be able to install libclang by installing the libclang-dev or libclang-devel package, depending on your distribution.
On macOS, you can use Homebrew's llvm package.
On Windows, you must set LLVM_INSTALL_DIR to the installation path.

Qt is now configured for building. Just run 'jom'.
Once everything is built, you must run 'jom install'.
Qt will be installed into 'E:\scipyenv'.

Prior to reconfiguration, make sure you remove any leftovers from
the previous build.
################################################################################

............................
13.3 Build Qt5
............................

jom /J 8

............................
13.3 Install Qt5
............................

jom install

===============================================================================
14 Install pip requirements stage 0
===============================================================================

cd %VIRTUAL_ENV%

pip install -r <path-where-scipyen-repo-is>\doc\install\pip_requirements_0.txt

===============================================================================
15 Build & install sip, pyqt5, pyqt5-sip - ONLY if using Qt built from sources!

Skip if PyQt5 was installed via pip!
===============================================================================

Restart the command prompt, run scipyact_vs64, cd to %VIRTUAL_ENV%\src

From scipyen-dependencies\Unix,
extract the tar.gz archives (see below which) using 7zip in %VIRTUAL_ENV%\src

..............
15.1 sip: sip-5.5.1.dev2011271026.tar.gz
..............
    python setup.py build
    python setup.py install

..............
15.2 PyQt5: PyQt5-5.15.3.dev2012141313.tar.gz
..............
    python configure.py --confirm-license --designer-plugindir=%VIRTUAL_ENV%\lib\plugins\designer --qml-plugindir=%VIRTUAL_ENV%\lib\plugins\PyQt5 --qsci-api-destdir=%VIRTUAL_ENV%\share\qt5 --no-python-dbus --disable QtNfc
    jom
    nmake install

    pip list (should indicate PyQt5, sip)

................................
15.3 PyQt5.sip extension module: PyQt5_sip-12.8.1.tar.gz
................................
    python setup.py build
    python setup.py install

    pip show PyQt5-sip <-- verifies that PyQt5 sip module is installed

-------------------------------------------------------------------------------
15.4 Check PyQt5
-------------------------------------------------------------------------------
start python then run:
import sys
from PyQt5 import QtWidgets
app = QtWidgets.QApplication(sys.argv)
win = QtWidgets.QMainWindow()
win.show()

close the window then exit()

===============================================================================
16 Install pip requirements stage 1
===============================================================================
cd %VIRTUAL_ENV%

pip install -r <path-where-scipyen-repo-is>\doc\install\pip_requirements_1.txt

Check that jupyter qtconsole works:
jupyter qtconsole

Check that matplotlib works in qtconsole:
%matlplotlib
expect to see the message "Using matplotlib backend: Qt5Agg" (wait a while)
import matplotlib.pyplot as plt
plt.figure()
exit

Check that matplotlib also works in python using Qt5Agg
(run the last three lines above at regular python prompt;
 the %matplotlib is a jupyter-specific macro!)
in addition you have to call plt.show() to display the figure , when in plain
python.


================================================================================
17 Build VIGRA
================================================================================

cd to ROOT\src
clone the vigra repo:
git clone https://github.com/ukoethe/vigra.git
    if cloning 1.11.0, replace:
        vigra\src\impex\hdf5impex.cxx
        vigra\vigranumpy\src\core\segmentation.cxx

        with the ones supplied in downloads\vigra_patches

        NOTE: the new hdf5impex.cxx uses a deprecated syntax which does not fit
        the more recent function signature in H5Opublic.h

        NOTE: the new segmentation.cxx adapts an issue in MSVC C++ sort
        algorithm in <algorithm> header (apparently their compiler cannot
        distinguish between iterator and const_iterator from the context -
        unless there is a hidden compiler flag that would make it behave more
        like gnu g++)


Build using VisualStudio2019
---------------------------------------

NOTE: if you use the virtual environment then call VS2019 from the command prompt
AFTER calling scipyact (ie. with the environment activated): devenv

Otherwise you may launch vs2019 as usual.

Open "folder" %VIRTUAL_ENV%\src\vigra

create x64-Release configuration

you may have to:
1) point to the python libray - choose lib not dll !
    %VIRTIUAL_ENV%\lib\boost_python39-vc142-mt-x64-1_77.lib

build

install

from src\vigra\out\install\x64-Release\ copy:
    bin\vigraimpex to e:\bin and e\lib
    lib\*.* to e:\lib
    include\*.* to e:\include

(here e:\is considered the root)

ATTENTION: the following is required to get python to properly load the vigra
libraries in windows 10 using Python 3.9:
in your own Scripts directory create a pyton script wih the following contents:

import os
os.add_dll_directory("e:/bin") # <-- replace here where vigraimpex.lib and vigraimpex.dll are
os.add_dll_directory("e:/lib") # <-- replace here where vigraimpex.lib and vigraimpex.dll are

Add the following line to your scipyact.bat script:
SET PYTHONSTARTUP=%USERPROFILE%\Scripts\scipyen_startup.py

No need to build documentation -> see it online at
http://ukoethe.github.io/vigra/doc-release/vigra/index.html

================================================================================
18 Install the rest of the pip requirements
================================================================================
cd %VIRTUAL_ENV%

pip install -r <path-where-scipyen-repo-is>\doc\install\pip_requirements_2.txt
pip install -r <path-where-scipyen-repo-is>\doc\install\pip_requirements_3.txt


================================================================================
19 Build and install NEURON
================================================================================
first install bison & flex?


git clone https://github.com/neuronsimulator/nrn
devenv

"Configure" will also pull iv, coreneuron
        CMAKE_INSTALL_PREFIX (-DCMAKE_INSTALL_PREFIX=) $VIRTUAL_ENV
        NRN_ENABLE_CORENEURON=true
        NRN_ENABLE_INTERVIEWS=true
        NRN_ENABLE_MECH_DLL_STYLE=true
        NRN_ENABLE_MODULE_INSTALL=true
        NRN_ENABLE_INTERNAL_READLINE=false
        NRN_MODULE_INSTALL_OPTIONS --prefix= --home=$VIRTUAL_ENV
        NRN_ENABLE_MPI=true
        NRN_ENABLE_MPI_DYNAMIC=false
        NRN_ENABLE_PYTHON=true (default python3 fallback to python2)
        NRN_ENABLE_PYTHON_DYNAMIC=false
        NRN_ENABLE_RX3D=true
        NRN_ENABLE_SHARED=true
        NRN_ENABLE_TESTS=false
        NRN_ENABLE_THREADS=true
        LIB_INSTALL_DIR=$VIRTUAL_ENV/lib64
        IV_ENABLE_SHARED=true
nmake
nmake install

    NOTE: Run the following in order to properly install neuron python modules
    inside the site-packages corresponding  to the environment's python version

cd $VIRTUAL_ENV/src/nrn-build/src/nrnpython

python setup.py install
    (to install nrnpython in site-packages)

    NOTE: Optional: Build neuron documentation locally and install locally
        (see $VIRTUAL_ENV/src/nrn/docs/README.md)

pip3 install -r $VIRTUAL_ENV/src/nrn/docs/docs_requirements.txt

    (installs required python packages (e.g.commonmark, sphinx-rtd-theme,
        recommonmark, plotly, etc) inside the virtual environment)

cd $VIRTUAL_ENV/src/nrn-build
make docs (NOTE this may fail --> no problems !)

    Optionally, copy/move (or, better make a symbolic link)
    $VIRTUAL_ENV/src/nrn/docs/_build to $VIRTUAL_ENV/doc/neuron


================================================================================
20 copy scipyen scripts to your %VIRTUAL_ENV\bin
================================================================================

