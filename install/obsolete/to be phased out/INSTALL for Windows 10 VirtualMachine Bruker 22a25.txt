2022-01-26 10:37:43
AVOID building on networked drive - created a 2nd VDI image for a 2nd partition
(~100 GiB)

Building on network drive will
1) slow down the process
2) interfere with building processes (e.g. HDF5 and VIGRA)

================================================
1. Tools for building scipyen dependencies.
install system-wide (make sure there is enough space on C:\drive)
================================================
(see installers in the DownloadsForScipyen bundle)

python-3.9.7 -- with options:
    * for everyone
    * raise the limit on PATH
    
kate
doxygen
git
cmake -- with options:
    * add CMake to the system PATH for all users
    * create CMake desktop icon

Visual Studio Community Edition 2019 - make sure it is all uptodate

7zip for windows 10

MPICH
    dowload from https://www.microsoft.com/en-us/download/confirmation.aspx?id=57467
    msmpisetup.exe <- run this first
    msmpisdk.msi

    If you choose to install these, then edit
    scipyact.bat, vs64.bat and scipyact_vs64.bat
    to append:
    C:\Program Files (x86)\Microsoft SDKs\MPI\Include to %INCLUDE%
    C:\Program Files (x86)\Microsoft SDKs\MPI\Lib to %LIB% and %LIBPATH%
    C:\Program Files\Microsoft MPI\Bin to %PATH%

nasm: (for jpeg)
    use nasm-2.15.05-installer-x64.exe
    download from https://www.nasm.us/pub/nasm/releasebuilds/2.15.05/win64/nasm-2.15.05-installer-x64.exe
    run as administrator;
    manually add c:\Programs Files\NASM to %PATH%
Ruby
StrwaberryPerl

================================================
2. Choose a drive with enough space (>> 30 GiB)
================================================
On Bruker's Windows 10 VM Virtualbox I use
Z:\ drive (mapped network drive to a Linux parition
          on the Linux host)

-----------------------------------------------------------------------
2.1 create a python virtual environment 
-----------------------------------------------------------------------
e:\>virtualenv scipyenv

-----------------------------------------------------------------------
2.2 make scipyen_sdk and scipyen_sdk_src directories
-----------------------------------------------------------------------
e:\>mkdir scipyen_sdk
e:\>mkdir scipyen_sdk_src

-----------------------------------------------------------------------
2.3 clone scipyen git repo
-----------------------------------------------------------------------
e:\>git clone https://github.com/ctigaret/scipyen.git

clone master and dev branches; remain on dev branch for now:
    
    cd scipyen
    git checkout master
    git pull
    git checkout dev
    git pull
    

-----------------------------------------------------------------------
2.4 Copy the batch files from scipyen\doc\install\win32 scripts
to your home directory (%USERPROFILE%)
-----------------------------------------------------------------------


2.4.1:
    make directory Scripts in %USERPROFILE%, and copy there the following:
        scipyact.bat
        scipyact_vs64.bat
        vs64.bat
        scipyen.bat
        
    Purpose of these scripts:
        scipyact.bat - activates the python virtual environment
            MUST be called before launghing scipyen
            
        scipyact_vs64.bat - actvated the python virtual environment 
            AND the developer environment (under Visual Studio 2019)
            
        vs64.bat - activates ONLY the VS2019 development environment
        
        scipyen.bat - launches Scipyen
            MUST be called AFTER calling scipyact.bat
    
    EDIT scipyen.bat:
        change scipyendir to where sciyen git repo is located
        e.g.:
            set scipyendir=e:\scipyen
        
    EDIT scipyact.bat:
        edit activation_script to point to the virtual environment
        activation script
        
        edit SDK to point to where scipyen_sdk is
        
        make sure the paths to the Python environment are correct
        (i.e. %USERPROFILE%\AppData\Local\Programs\Python\Python39)
    
    Similarly, make sure the paths to the Python environment are correct
    in vs64.bat

from scipyen repo copy scipyen_startup.py to scipyenv\Scripts
NOTE: scipyenv is the virtual environment directory
    
Add %USERPROFILE%\Scripts to your PATH:
    use Settings -> search for environment -> Edit environment variables
    for your account -> select PATH in top half of dialog -> click Edit ->
    -> add c:\Users\<xxx>\Scripts
    
    restart the command prompt
    
========================================================================
3. Install pip requirements in the virtual environment
========================================================================

From anywhere (but typically, the parent directory of scipyenv):
    
    3.1 activate the virtual environment, e.g.:
        e:\>scipyact
        
    3.2 call 'pip install -r ***' where *** is a pip_requirements_*_win64.txt
    found in scipyen\doc\install:
        e:\>pip install -r pip_requirements_0_win64.txt
        e:\>pip install -r e:\scipyen\doc\install\pip_requirements_1_win64.txt
        e:\>pip install -r e:\scipyen\doc\install\pip_requirements_2.txt
        e:\>pip install -r e:\scipyen\doc\install\pip_requirements_3.txt
        
     (be prepared to wait)   
     
    When alll is done, check that you have a working juoyter-qtconsole
     
========================================================================
4. Install VIGRA
========================================================================

Open a new command prompt, activate sciyen WITH VidualStudio development

e:\>scipyen_vs64

--------------------------------------------------------------------------------
4.1. Install vigra dependencies in scipyen_sdk
--------------------------------------------------------------------------------
vigra dependencies tree:
    
    vigra   <-  fftw3
                libjpeg <-  zlib
                libpng  <-  zlib 
                libtiff
                hdf5    <-  zlib
                boost_python <- boost <- icu (skipped)
                openexr (optional) <- Imath, openssl, icu
                python (done above)
                numpy, sphinx, nose (done above via pip)
                cmake (done above)
                
.......................................................................                
zlib
.......................................................................                

from https://zlib.net/ download zlib source code, version 1.2.11,
zipfile format (730K,
SHA-256 hash d7510a8ee1918b7d0cad197a089c0a2cd4d6df05fee22389f67f115e738b178d)

devenv -> open zlib-1.2.11\contrib\vstudio\vc14\zlibvc.sln

    In the dialogue make sure the following are selected:
        * Windows SDK version: 10.0 (latest installed version)
        * Platform toolset: Upgrade to v142

        By default all sub-projects are selected; select ONLY zlib
        (i.e., 'zlibvc.vcxproj').

        Click 'OK'

    From the drop-down combo-boxes in the toolbar select
        "Release" and "x64"

    In Solution Explorer select the zlibvc solution.
        Right-click, select Properties; in the 'zlibvc Property Pages dialogue'
        make the following changes: change all from zlibwapi.* to zlib.*, as
        follows:
        Configuration Properties
            General:
                Target Name:    zlib

            Linker:
                General:
                    Output File:    $(OutDir)zlib.dll
                Debugging:
                    Generate Program Database file:     $(OutDir)zlib.pdb
                    Map file Name:                      $(OutDir)zlib.map
                Advanced:
                    Import Library:                     $(OutDir)zlib.lib


        Leave OutDir unchanges; we will copy files manually to scipyen_sdk

    From the Build menu choose "Build Solution"

    Manually install files
        Close VStudio

        from zlib-1.2.11\contrib\vstudio\vc14\x64\ZlibDllrelease copy:
            zlib.dll to  %SDK%\bin\
            zlib.lib, zlib.exp to  %SDK%\lib\

        from zlib-1.2.11 copy:
            zlib.h, zconf.h and all other *.h files to %SDK%\include\
            zlib.3 to %SDK%\share\man\man3\
            README, FAQ, zlib.3.pdf, doc\*.* to %SDK%\share\doc\zlib\

.......................................................................                
2. libpng
.......................................................................                

download lpng1637.zip from

https://sourceforge.net/projects/libpng/files/libpng16/1.6.37/lpng1637.zip/download?use_mirror=jztkft

ATTENTION:

copy lpng1637\scripts\pnglibconf.h.prebuilt
to   lpng1637\pnglibconf.h



launch VStudio (devenv)
    then "open project or solution" -> choose:
    %SRC%\lpng1637\projects\vstudio\vstudio.sln

accept all projects

accept migration to VS 14.2 (VS community edition 2019) -> adaps all *.vcxproj files in
the subdirectories

open configuration manager,
    in active solution platform (currently, win32) choose <new> ->
        choose new platform: x64, check ON create new project platforms

    in Active solution configurations select Release Library

    If you have built zlib, in the Build check ONLY libpng or at least UNCKECK zlib
    (we will use the zlib built as above).


    open properties for libpng (sub)project -> right click -> properties
        -> Configuration properties:
            -> VC++ directories:
                -> Include directories -> add %SRC%\include
                -> External include directories -> add %SRC%\include
                    -> REMOVE the $(ZLibIncldDir)
                -> Libray directories -> add %SRC%\lib;%SRC%\lib64;%SRC%\bin
                
            -> C/C++:
                -> General:
                    -> Additional include directories -> add %SRC%\\lpng1637;%SRC%\include
                        
                    -> Treat warning as errors -> No (/WX-)

            -> Linker:
                -> General:
                    -> Additional library directories -> add %SRC%\lib;%SRC%\lib64

    Build menu -> build solution (Ctrl+Shift+B), or just build libpng (right-click)

install:
    the built files are in
    %SRC%\lpng1637\projects\vstudio\x64\Release
    from there:
        copy libpng16.dll, libpng16.pdb to %SDK%\bin\
        copy libpng16.lib, libpng16.exp to %SDK%\lib\

    copy all include files (*.h) from %SRC%\lpng1637 to %SDK%\include
    copy
        libpng3 and libpngpf.3 to %SDK%\share\man\man3\
        png.5 to %SDK%\share\man\man5\
        libpng-manual.txt, README, LICENSE to %SDK%\share\doc\libpng\

.......................................................................                
jpeg - requires nasm
.......................................................................                
d %SRC%

gh repo clone winlibs/libjpeg
or
git clone https://github.com/winlibs/libjpeg.git

build with cmake-gui in out-of-source tree
cd scipyen_sdk_src
mkdir libjpeg-build
cd libjpeg-build
cmake-gui ..\libjpeg -DCMAKE_INSTALL_PREFIX=e:\scipyen_sdk -DDEPENDENCY_SEARCH_PREFIX=e:\scipyen_sdk
=> select VS 16 2019 + default native compilers
configure -> select installation to <path to>\scipyen_sdk
set WITH_JPEG7 and WITH_JPEG8 ON
configure until no more red lines; check no errors
generate -> check no errors
open project => opens VS2019 -> select release + x64 -> build solution
once this succeeds, then right-cligk on INSTALL solution in solution explorer,
click on build solution -> this will install in scipyen_sdk
            
    
.......................................................................                
fftw
.......................................................................                

download fftw-3.3.5-dll64.zip from http://www.fftw.org/install/windows.html

extract to scipyen_sdk_src\fftw3

cd into fftw3 then run:

lib /machine:x64 /def:libfftw3-3.def
lib /machine:x64 /def:libfftw3f-3.def
lib /machine:x64 /def:libfftw3l-3.def

then copy:
    copy *.exe ..\..\scipyen_sdk\bin\
    copy *.dll ..\..\scipyen_sdk\bin\
    copy *.lib ..\..\scipyen_sdk\lib\
    copy *.def ..\..\scipyen_sdk\lib\
    copy *.exp ..\..\scipyen_sdk\lib\
    copy *.h  ..\..\scipyen_sdk\include\
        
    *.exe and *.dll files to %SDK%\bin\
    *.lib, *.def, *.exp files to %SDK%\lib\
    *.h files (actually, only fftw3.h) to %SDK%\include\
    COPYING, COPYRIGHT, NEWS, README* to %SDK%\share\doc\fftw3\

.......................................................................                
tiff - requires jpeg; no support for OpenGL and deflate
.......................................................................                
In e:\scipyen_sdk_src run:
    git clone https://gitlab.com/libtiff/libtiff.git
    
build with cmake in out-of-source tree => generate VS2019 solution
    mkdir libtiff-build
    cd libtiff-build
    
    cmake-gui -DCMAKE_INSTALL_PREFIX=e:\scipyen_sdk -DDEPENDENCY_SEARCH_PREFIX=e:\scipyen_sdk ..\libtiff
        
    configure: first run: select VS 16 2019, X64;
    configure, set install_prefix to scipyen_sdk, configure then generate
    open project -> VS2019 -> import ALL BUILD
        select Release + x64
        Build -> build solution
        once done, select INSTALL from solution explorer then right-click -> build
        this will install libtiff in e:\scipyen_sdk; no need for actions below
        close vs2019
        
check that it works:
    from http://www.simplesystems.org/libtiff/images.html download
    https://download.osgeo.org/libtiff/pics-3.8.0.tar.gz

    unpack with 7zip => %SDK%\share\libtiffpic

open command prompt, cd %SDK%\share\libtiffpic
tiffcp -lzw cramps.tif x.tif
tiffcmp cramps.tif x.tif
tiff2pdf -o cramps.pdf cramps.tif
tiff2bw jello.tif jello_bw.tif

also you may run tiffinfo on all tif files in this directory

.......................................................................                
boost - built w/o support for icu, mpi
.......................................................................                

from https://www.boost.org/doc/libs/1_77_0/more/getting_started/windows.html#get-boost
download boost_1_77_0.7z
extract to scipyen_sdk_src => will create scipyen_sdk_src\boost_1_77_0

Activate scipyen_vs64 environment

Create the b2 Boost.Build program

    cd boost_1_77_0\tools\build
    bootstrap
    .\b2 --prefix=e:\scipyen_sdk_src\Boost.Build toolset=msvc install

 Build & install boost

    cd e:\scipyen_sdk_src\boost_1_77_0


    Run:
        
    ..\Boost.Build\bin\b2 toolset=msvc threading=multi address-model=64 variant=release link=shared --prefix=e:\scipyen_sdk --build-type=complete msvc install

    NOTE: always use the same toolset setting!
    
    This will install:
    * boost headers (*.hpp) in scipyen_sdk\include\boost_1_77_0\boost
        => add this path e:\scipyen_sdk\include\boost_1_77_0\
            to the relevant variables when building vigra

    * the *.dll and *.lib files in scipyen_sdk\lib
    
.......................................................................                
hdf5
.......................................................................                
See:
https://portal.hdfgroup.org/display/support/Building+HDF5+with+CMake

recommended download: CMake-hdf5-1.12.0.zip
but you may widh to use CMake-hdf5-1.10.6.zip; in this case DISREGARD the
instructions to patch vigra for HDF5 below

extract CMake-hdf5-1.12.0.zip to e:\scipyen_sdk_src
    => creates  e:\scipyen_sdk_src\CMake-hdf5-1.12.0 directory
    
    cd CMake-hdf5-1.12.0
    
    # Create a build script by running the following line:
    # ATTENTION: NO COMMAS in the value to the -S option !
e:\scipyen_sdk_src\CMake-hdf5-1.12.0>echo ctest -S HDF5config.cmake,BUILD_GENERATOR=VS201964,INSTALLDIR=e:\scipyen_sdk -C Release -V -O hdf5.log > build.bat
    
    #run the build script
e:\scipyen_sdk_src\CMake-hdf5-1.12.0>build
    
This will generate a zip file inside the CMake-hdf5-1.12.0 directory:
    HDF5-1.10.6-win64.zip
    
    extract and merge almost all of its contents with the correspnoding 
    directories in e:\scipyen_sdk
    
    exceptions are:
        * all document files in the root HDF5-1.10.6-win64 directory should go to
            e:\scipyen_sdk\share\doc\hdf5
        
        * DO overwrite all files in the destination, when asked
        (this will replace zlib from above with a new one - it's OK)
        
.......................................................................                
VIGRA - without OpenEXR support
.......................................................................                
e:\scipyen_sdk_src>git clone https://github.com/ukoethe/vigra.git

patch the vigra source tree as per scipyen\doc\install\vigra_patches\README

a) for HDF5 ONLY if using HDF5 >= 1.11:
        replace: 
            vigra/impex/hdf5impex.cxx 
            
        with:
            vigra_patches/hdf5_gt_1.10.6/vigra/impex/hdf5impex.cxx

b) for CMake >= 3.22.1 (used to generate VStudio solution)
        replace:
            vigra.CMakeLists.txt
            
        with:
            vigra_patches/windows/CMake_3.22.1/vigra/CMakeLists.txt

c) for building the solution generated in (b)
        replace:
            vigra/vigranumpy/src/core/segmentation.cxx
            
        with:
            vigra_patches/windows/windows/VisualStudio_2019/vigra/vigranumpy/src/segmentation.cxx

Create out-of-source build tree:            
e:\scipyen_sdk_src>mkdir vigra-build
e:\scipyen_sdk_src>cd vigra-build

Then run:
    cmake-gui ..\vigra -DCMAKE_INSTALL_PREFIX=e:\scipyen_sdk -DDEPENDENCY_SEARCH_PREFIX=e:\scipyen_sdk
        
    in CMake GUI you must set:
        Boost_PYTHON_LIBRARY to 
            e:\scipyen_sdk\lib\boost_python39-vc142-mt-x64-1_77.lib
        
        deselect the following:
            BUILD_TESTS, AUTOEXEC_TESTS, TEST_VIGRANUMPY
        
        set CMAKE_INSTALL_PREFIX to e:\scipyen_sdk
        set LIB_SUFFIX to 64
        
        set CMAKE_INSTALL_PREFIX to
            e:\scipyen_sdk
            
        Check all other libraries and paths are correct, especially for the 
        dependencies built above (HDF5, jpeg, tiff, png)
        
        Check locations for Python are correct (yes, use the Python.exe in the 
                                                scipyenv)
        
        Configure repeatedly until no more red lines in the GUI.
        Check the output to have vigranumpy built and installed
        
        Finally press Generate to generate VStudio solution, then
        Click "open project" => Opens VStudio
        in VStudio, make sure Release + x64 are selected
        Select ALL_BUILD then run Build/Build Solution
        
    The doc_cpp.vcxproj and doc_python.vcxproj will likely FAIL
    Ignore that
    
    Then in Solution explorer select INSTALL project, right-click, build.
    
    This will install:
        header files in scipeyn_sdk\include (including "windows.h")
        vigranumpy in e:\scipyenv\lib\site-packages\vigra
        vigraimpex.lib in e:\scipyen_sdk\lib64
        vigraimpex.dll in e:\scipyen_sdk\bin
        doc in e:\scipyen_sdk\doc
        
        
        
        
